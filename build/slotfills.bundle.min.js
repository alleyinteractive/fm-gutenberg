/*! For license information please see slotfills.bundle.min.js.LICENSE.txt */
!function(){var e={184:function(e,t){var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var a=o.apply(null,n);a&&e.push(a)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var s in n)r.call(n,s)&&n[s]&&e.push(s);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},746:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".fm-gutenberg-dropdown-wrap{display:inline-block}.fm-gutenberg-dropdown-wrap .fm-gutenberg-dropdown{background:#fff;border:1px solid #ccc;position:absolute;z-index:20}.fm-gutenberg-dropdown-wrap .fm-gutenberg-dropdown ul{margin:0;padding:0}.fm-gutenberg-dropdown-wrap .fm-gutenberg-dropdown li{border:none;cursor:pointer;margin:0;padding:2px 5px}","",{version:3,sources:["webpack://./components/autocomplete/index.scss"],names:[],mappings:"AAAA,4BACE,oBAAA,CAEA,mDACE,eAAA,CACA,qBAAA,CACA,iBAAA,CACA,UAAA,CAEA,sDACE,QAAA,CACA,SAAA,CAGF,sDACE,WAAA,CACA,cAAA,CACA,QAAA,CACA,eAAA",sourcesContent:[".fm-gutenberg-dropdown-wrap {\n  display: inline-block;\n\n  .fm-gutenberg-dropdown {\n    background: #fff;\n    border: 1px solid #ccc;\n    position: absolute;\n    z-index: 20;\n\n    ul {\n      margin: 0;\n      padding: 0;\n    }\n\n    li {\n      border: none;\n      cursor: pointer;\n      margin: 0;\n      padding: 2px 5px;\n    }\n  }\n}\n"],sourceRoot:""}]),t.Z=a},916:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".components-checkbox-control{margin-bottom:2px}","",{version:3,sources:["webpack://./components/checkboxes-field/index.scss"],names:[],mappings:"AAAA,6BACE,iBAAA",sourcesContent:[".components-checkbox-control {\n  margin-bottom: 2px;\n}\n\n"],sourceRoot:""}]),t.Z=a},615:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".fm-gutenberg-color-preview span{height:32px;margin-left:-10px;margin-right:5px;width:32px}.fm-gutenberg-popup .components-color-picker{margin-top:30px}","",{version:3,sources:["webpack://./components/color-picker-field/index.scss"],names:[],mappings:"AAAA,iCACE,WAAA,CACA,iBAAA,CACA,gBAAA,CACA,UAAA,CAGF,6CACE,eAAA",sourcesContent:[".fm-gutenberg-color-preview span {\n  height: 32px;\n  margin-left: -10px;\n  margin-right: 5px;\n  width: 32px;\n}\n\n.fm-gutenberg-popup .components-color-picker {\n  margin-top: 30px;\n}\n"],sourceRoot:""}]),t.Z=a},222:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".fm-gutenberg-popup-wrap{display:inline-block}.fm-gutenberg-popup-wrap .fm-gutenberg-popup{background:#fff;border:1px solid #ccc;padding:5px;position:absolute;z-index:200}.fm-gutenberg-popup-wrap .fm-gutenberg-popup:empty{display:none}.fm-gutenberg-popup-wrap .fm-gutenberg-popup__close{position:absolute;right:0;z-index:1}","",{version:3,sources:["webpack://./components/date-field/index.scss"],names:[],mappings:"AAAA,yBACE,oBAAA,CAEA,6CACE,eAAA,CACA,qBAAA,CACA,WAAA,CACA,iBAAA,CACA,WAAA,CAEA,mDACE,YAAA,CAGF,oDACE,iBAAA,CACA,OAAA,CACA,SAAA",sourcesContent:[".fm-gutenberg-popup-wrap {\n  display: inline-block;\n\n  .fm-gutenberg-popup {\n    background: #fff;\n    border: 1px solid #ccc;\n    padding: 5px;\n    position: absolute;\n    z-index: 200;\n\n    &:empty {\n      display: none;\n    }\n\n    &__close {\n      position: absolute;\n      right: 0;\n      z-index: 1;\n    }\n  }\n}\n"],sourceRoot:""}]),t.Z=a},241:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(263),l=a()(o());l.i(s.Z),l.push([e.id,".fm-gutenberg__group{border:1px solid #ccc;padding:5px}.react-tabs li.react-tabs__tab{margin-bottom:0}.react-tabs li:not(.react-tabs__tab--selected){background:#ccc;border-color:#aaa;border-radius:5px 5px 0 0}.react-tabs .fm-gutenberg__group{border:0}.react-tabs__vertical{display:flex}.react-tabs__vertical .react-tabs__tab-list{border:0;display:flex;flex-direction:column;margin:0;padding:0}.react-tabs__vertical li.react-tabs__tab{border-bottom:1px solid #aaa;border-radius:0;cursor:pointer;list-style:none;padding:6px 12px}.react-tabs__vertical .react-tabs__tab-panel{flex:1}.fm-gutenberg__group-content.collapsed{display:none}","",{version:3,sources:["webpack://./components/fieldRouter/index.scss"],names:[],mappings:"AAEA,qBACE,qBAAA,CACA,WAAA,CAIA,+BACE,eAAA,CAGF,+CACE,eAAA,CACA,iBAAA,CACA,yBAAA,CAGF,iCACE,QAAA,CAIJ,sBACE,YAAA,CAEA,4CACE,QAAA,CACA,YAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA,CAGF,yCACE,4BAAA,CACA,eAAA,CACA,cAAA,CACA,eAAA,CACA,gBAAA,CAGF,6CACE,MAAA,CAIJ,uCACE,YAAA",sourcesContent:["@import '../../node_modules/react-tabs/style/react-tabs.css';\n\n.fm-gutenberg__group {\n  border: 1px solid #ccc;\n  padding: 5px;\n}\n\n.react-tabs {\n  li.react-tabs__tab {\n    margin-bottom: 0;\n  }\n\n  li:not(.react-tabs__tab--selected) {\n    background: #ccc;\n    border-color: #aaa;\n    border-radius: 5px 5px 0 0;\n  }\n\n  .fm-gutenberg__group {\n    border: 0;\n  }\n}\n\n.react-tabs__vertical {\n  display: flex;\n\n  .react-tabs__tab-list {\n    border: 0;\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 0;\n  }\n\n  li.react-tabs__tab {\n    border-bottom: 1px solid #aaa;\n    border-radius: 0;\n    cursor: pointer;\n    list-style: none;\n    padding: 6px 12px;\n  }\n\n  .react-tabs__tab-panel {\n    flex: 1;\n  }\n}\n\n.fm-gutenberg__group-content.collapsed {\n  display: none;\n}\n"],sourceRoot:""}]),t.Z=l},752:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'.fm-gutenberg-remove{float:right;height:36px;margin:0;text-align:center;width:36px}.fm-gutenberg-remove::before{bottom:0;color:#a0a5aa;content:"ï…“";font-family:dashicons;font-size:15px;height:15px;left:0;line-height:1;margin:auto;position:relative;right:0;top:0;width:15px}.fm-gutenberg-remove:hover::before{color:#d54e21}.fm-gutenberg-move-handle{background-color:#fafafa;border:1px solid #dadada;cursor:move;min-height:15px;padding:0 10px;width:100%}.fm-gutenberg-move-handle h4{display:inline-block}.fm-gutenberg-panel-container{flex-direction:column;width:100%}.fm-gutenberg-controls{clear:both;display:flex;justify-content:space-between;width:100%}.fm-gutenberg-sortable-list{width:100%}.fm-gutenberg-sortable-list li{border:1px solid #ddd;border-radius:3px;padding:3px}.components-base-control{width:100%}',"",{version:3,sources:["webpack://./components/repeatable/index.scss"],names:[],mappings:"AAAA,qBAAA,WACE,CAAA,WACA,CAAA,QACA,CAAA,iBACA,CAAA,UACA,CAAA,6BAEA,QACE,CAAA,aACA,CAAA,WACA,CAAA,qBACA,CAAA,cACA,CAAA,WACA,CAAA,MACA,CAAA,aACA,CAAA,WACA,CAAA,iBACA,CAAA,OACA,CAAA,KACA,CAAA,UACA,CAAA,mCAGF,aACE,CAAA,0BAIJ,wBACE,CAAA,wBACA,CAAA,WACA,CAAA,eACA,CAAA,cACA,CAAA,UACA,CAAA,6BAEA,oBACE,CAAA,8BAIJ,qBACE,CAAA,UACA,CAAA,uBAGF,UACE,CAAA,YACA,CAAA,6BACA,CAAA,UACA,CAAA,4BAGF,UACE,CAAA,+BAEA,qBACE,CAAA,iBACA,CAAA,WACA,CAAA,yBAIJ,UACE",sourcesContent:[".fm-gutenberg-remove {\n  float: right;\n  height: 36px;\n  margin: 0;\n  text-align: center;\n  width: 36px;\n\n  &::before {\n    bottom: 0;\n    color: #a0a5aa;\n    content: '\\f153';\n    font-family: dashicons;\n    font-size: 15px;\n    height: 15px;\n    left: 0;\n    line-height: 1;\n    margin: auto;\n    position: relative;\n    right: 0;\n    top: 0;\n    width: 15px;\n  }\n\n  &:hover::before {\n    color: #d54e21;\n  }\n}\n\n.fm-gutenberg-move-handle {\n  background-color: #fafafa;\n  border: 1px solid #dadada;\n  cursor: move;\n  min-height: 15px;\n  padding: 0 10px;\n  width: 100%;\n\n  h4 {\n    display: inline-block;\n  }\n}\n\n.fm-gutenberg-panel-container {\n  flex-direction: column;\n  width: 100%;\n}\n\n.fm-gutenberg-controls {\n  clear: both;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.fm-gutenberg-sortable-list {\n  width: 100%;\n\n  li {\n    border: 1px solid #ddd;\n    border-radius: 3px;\n    padding: 3px;\n  }\n}\n\n.components-base-control {\n  width: 100%;\n}\n"],sourceRoot:""}]),t.Z=a},392:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".fm-gutenberg-field__hidden{display:none}","",{version:3,sources:["webpack://./components/text-field/index.scss"],names:[],mappings:"AAAA,4BACE,YAAA",sourcesContent:[".fm-gutenberg-field__hidden {\n  display: none;\n}\n"],sourceRoot:""}]),t.Z=a},263:function(e,t,n){"use strict";var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".react-tabs {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.react-tabs__tab-list {\n  border-bottom: 1px solid #aaa;\n  margin: 0 0 10px;\n  padding: 0;\n}\n\n.react-tabs__tab {\n  display: inline-block;\n  border: 1px solid transparent;\n  border-bottom: none;\n  bottom: -1px;\n  position: relative;\n  list-style: none;\n  padding: 6px 12px;\n  cursor: pointer;\n}\n\n.react-tabs__tab--selected {\n  background: #fff;\n  border-color: #aaa;\n  color: black;\n  border-radius: 5px 5px 0 0;\n}\n\n.react-tabs__tab--disabled {\n  color: GrayText;\n  cursor: default;\n}\n\n.react-tabs__tab:focus {\n  outline: none;\n}\n\n.react-tabs__tab:focus:after {\n  content: '';\n  position: absolute;\n  height: 5px;\n  left: -4px;\n  right: -4px;\n  bottom: -5px;\n  background: #fff;\n}\n\n.react-tabs__tab-panel {\n  display: none;\n}\n\n.react-tabs__tab-panel--selected {\n  display: block;\n}\n","",{version:3,sources:["webpack://./node_modules/react-tabs/style/react-tabs.css"],names:[],mappings:"AAAA;EACE,wCAAwC;AAC1C;;AAEA;EACE,6BAA6B;EAC7B,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,qBAAqB;EACrB,6BAA6B;EAC7B,mBAAmB;EACnB,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,0BAA0B;AAC5B;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,WAAW;EACX,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".react-tabs {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.react-tabs__tab-list {\n  border-bottom: 1px solid #aaa;\n  margin: 0 0 10px;\n  padding: 0;\n}\n\n.react-tabs__tab {\n  display: inline-block;\n  border: 1px solid transparent;\n  border-bottom: none;\n  bottom: -1px;\n  position: relative;\n  list-style: none;\n  padding: 6px 12px;\n  cursor: pointer;\n}\n\n.react-tabs__tab--selected {\n  background: #fff;\n  border-color: #aaa;\n  color: black;\n  border-radius: 5px 5px 0 0;\n}\n\n.react-tabs__tab--disabled {\n  color: GrayText;\n  cursor: default;\n}\n\n.react-tabs__tab:focus {\n  outline: none;\n}\n\n.react-tabs__tab:focus:after {\n  content: '';\n  position: absolute;\n  height: 5px;\n  left: -4px;\n  right: -4px;\n  bottom: -5px;\n  background: #fff;\n}\n\n.react-tabs__tab-panel {\n  display: none;\n}\n\n.react-tabs__tab-panel--selected {\n  display: block;\n}\n"],sourceRoot:""}]),t.Z=a},645:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},856:function(e){e.exports=function(){"use strict";var e=Object.hasOwnProperty,t=Object.setPrototypeOf,n=Object.isFrozen,r=Object.getPrototypeOf,o=Object.getOwnPropertyDescriptor,i=Object.freeze,a=Object.seal,s=Object.create,l="undefined"!=typeof Reflect&&Reflect,c=l.apply,u=l.construct;c||(c=function(e,t,n){return e.apply(t,n)}),i||(i=function(e){return e}),a||(a=function(e){return e}),u||(u=function(e,t){return new(Function.prototype.bind.apply(e,[null].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t))))});var d,p=C(Array.prototype.forEach),f=C(Array.prototype.pop),h=C(Array.prototype.push),m=C(String.prototype.toLowerCase),g=C(String.prototype.match),v=C(String.prototype.replace),b=C(String.prototype.indexOf),y=C(String.prototype.trim),A=C(RegExp.prototype.test),x=(d=TypeError,function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return u(d,t)});function C(e){return function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return c(e,t,r)}}function w(e,r){t&&t(e,null);for(var o=r.length;o--;){var i=r[o];if("string"==typeof i){var a=m(i);a!==i&&(n(r)||(r[o]=a),i=a)}e[i]=!0}return e}function k(t){var n=s(null),r=void 0;for(r in t)c(e,t,[r])&&(n[r]=t[r]);return n}function S(e,t){for(;null!==e;){var n=o(e,t);if(n){if(n.get)return C(n.get);if("function"==typeof n.value)return C(n.value)}e=r(e)}return function(e){return console.warn("fallback value for",e),null}}var E=i(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),I=i(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),_=i(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),j=i(["animate","color-profile","cursor","discard","fedropshadow","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),O=i(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),T=i(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),N=i(["#text"]),R=i(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),P=i(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),D=i(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),M=i(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),L=a(/\{\{[\s\S]*|[\s\S]*\}\}/gm),B=a(/<%[\s\S]*|[\s\S]*%>/gm),H=a(/^data-[\-\w.\u00B7-\uFFFF]/),F=a(/^aria-[\-\w]+$/),U=a(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),z=a(/^(?:\w+script|data):/i),$=a(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function W(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var G=function(){return"undefined"==typeof window?null:window},K=function(e,t){if("object"!==(void 0===e?"undefined":V(e))||"function"!=typeof e.createPolicy)return null;var n=null,r="data-tt-policy-suffix";t.currentScript&&t.currentScript.hasAttribute(r)&&(n=t.currentScript.getAttribute(r));var o="dompurify"+(n?"#"+n:"");try{return e.createPolicy(o,{createHTML:function(e){return e}})}catch(e){return console.warn("TrustedTypes policy "+o+" could not be created."),null}};return function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:G(),n=function(t){return e(t)};if(n.version="2.3.4",n.removed=[],!t||!t.document||9!==t.document.nodeType)return n.isSupported=!1,n;var r=t.document,o=t.document,a=t.DocumentFragment,s=t.HTMLTemplateElement,l=t.Node,c=t.Element,u=t.NodeFilter,d=t.NamedNodeMap,C=void 0===d?t.NamedNodeMap||t.MozNamedAttrMap:d,Z=t.HTMLFormElement,q=t.DOMParser,Y=t.trustedTypes,X=c.prototype,J=S(X,"cloneNode"),Q=S(X,"nextSibling"),ee=S(X,"childNodes"),te=S(X,"parentNode");if("function"==typeof s){var ne=o.createElement("template");ne.content&&ne.content.ownerDocument&&(o=ne.content.ownerDocument)}var re=K(Y,r),oe=re&&Me?re.createHTML(""):"",ie=o,ae=ie.implementation,se=ie.createNodeIterator,le=ie.createDocumentFragment,ce=ie.getElementsByTagName,ue=r.importNode,de={};try{de=k(o).documentMode?o.documentMode:{}}catch(e){}var pe={};n.isSupported="function"==typeof te&&ae&&void 0!==ae.createHTMLDocument&&9!==de;var fe=L,he=B,me=H,ge=F,ve=z,be=$,ye=U,Ae=null,xe=w({},[].concat(W(E),W(I),W(_),W(O),W(N))),Ce=null,we=w({},[].concat(W(R),W(P),W(D),W(M))),ke=Object.seal(Object.create(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),Se=null,Ee=null,Ie=!0,_e=!0,je=!1,Oe=!1,Te=!1,Ne=!1,Re=!1,Pe=!1,De=!1,Me=!1,Le=!0,Be=!0,He=!1,Fe={},Ue=null,ze=w({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),$e=null,Ve=w({},["audio","video","img","source","image","track"]),We=null,Ge=w({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),Ke="http://www.w3.org/1998/Math/MathML",Ze="http://www.w3.org/2000/svg",qe="http://www.w3.org/1999/xhtml",Ye=qe,Xe=!1,Je=void 0,Qe=["application/xhtml+xml","text/html"],et="text/html",tt=void 0,nt=null,rt=o.createElement("form"),ot=function(e){return e instanceof RegExp||e instanceof Function},it=function(e){nt&&nt===e||(e&&"object"===(void 0===e?"undefined":V(e))||(e={}),e=k(e),Ae="ALLOWED_TAGS"in e?w({},e.ALLOWED_TAGS):xe,Ce="ALLOWED_ATTR"in e?w({},e.ALLOWED_ATTR):we,We="ADD_URI_SAFE_ATTR"in e?w(k(Ge),e.ADD_URI_SAFE_ATTR):Ge,$e="ADD_DATA_URI_TAGS"in e?w(k(Ve),e.ADD_DATA_URI_TAGS):Ve,Ue="FORBID_CONTENTS"in e?w({},e.FORBID_CONTENTS):ze,Se="FORBID_TAGS"in e?w({},e.FORBID_TAGS):{},Ee="FORBID_ATTR"in e?w({},e.FORBID_ATTR):{},Fe="USE_PROFILES"in e&&e.USE_PROFILES,Ie=!1!==e.ALLOW_ARIA_ATTR,_e=!1!==e.ALLOW_DATA_ATTR,je=e.ALLOW_UNKNOWN_PROTOCOLS||!1,Oe=e.SAFE_FOR_TEMPLATES||!1,Te=e.WHOLE_DOCUMENT||!1,Pe=e.RETURN_DOM||!1,De=e.RETURN_DOM_FRAGMENT||!1,Me=e.RETURN_TRUSTED_TYPE||!1,Re=e.FORCE_BODY||!1,Le=!1!==e.SANITIZE_DOM,Be=!1!==e.KEEP_CONTENT,He=e.IN_PLACE||!1,ye=e.ALLOWED_URI_REGEXP||ye,Ye=e.NAMESPACE||qe,e.CUSTOM_ELEMENT_HANDLING&&ot(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(ke.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING&&ot(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(ke.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(ke.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),Je=Je=-1===Qe.indexOf(e.PARSER_MEDIA_TYPE)?et:e.PARSER_MEDIA_TYPE,tt="application/xhtml+xml"===Je?function(e){return e}:m,Oe&&(_e=!1),De&&(Pe=!0),Fe&&(Ae=w({},[].concat(W(N))),Ce=[],!0===Fe.html&&(w(Ae,E),w(Ce,R)),!0===Fe.svg&&(w(Ae,I),w(Ce,P),w(Ce,M)),!0===Fe.svgFilters&&(w(Ae,_),w(Ce,P),w(Ce,M)),!0===Fe.mathMl&&(w(Ae,O),w(Ce,D),w(Ce,M))),e.ADD_TAGS&&(Ae===xe&&(Ae=k(Ae)),w(Ae,e.ADD_TAGS)),e.ADD_ATTR&&(Ce===we&&(Ce=k(Ce)),w(Ce,e.ADD_ATTR)),e.ADD_URI_SAFE_ATTR&&w(We,e.ADD_URI_SAFE_ATTR),e.FORBID_CONTENTS&&(Ue===ze&&(Ue=k(Ue)),w(Ue,e.FORBID_CONTENTS)),Be&&(Ae["#text"]=!0),Te&&w(Ae,["html","head","body"]),Ae.table&&(w(Ae,["tbody"]),delete Se.tbody),i&&i(e),nt=e)},at=w({},["mi","mo","mn","ms","mtext"]),st=w({},["foreignobject","desc","title","annotation-xml"]),lt=w({},I);w(lt,_),w(lt,j);var ct=w({},O);w(ct,T);var ut=function(e){var t=te(e);t&&t.tagName||(t={namespaceURI:qe,tagName:"template"});var n=m(e.tagName),r=m(t.tagName);if(e.namespaceURI===Ze)return t.namespaceURI===qe?"svg"===n:t.namespaceURI===Ke?"svg"===n&&("annotation-xml"===r||at[r]):Boolean(lt[n]);if(e.namespaceURI===Ke)return t.namespaceURI===qe?"math"===n:t.namespaceURI===Ze?"math"===n&&st[r]:Boolean(ct[n]);if(e.namespaceURI===qe){if(t.namespaceURI===Ze&&!st[r])return!1;if(t.namespaceURI===Ke&&!at[r])return!1;var o=w({},["title","style","font","a","script"]);return!ct[n]&&(o[n]||!lt[n])}return!1},dt=function(e){h(n.removed,{element:e});try{e.parentNode.removeChild(e)}catch(t){try{e.outerHTML=oe}catch(t){e.remove()}}},pt=function(e,t){try{h(n.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){h(n.removed,{attribute:null,from:t})}if(t.removeAttribute(e),"is"===e&&!Ce[e])if(Pe||De)try{dt(t)}catch(e){}else try{t.setAttribute(e,"")}catch(e){}},ft=function(e){var t=void 0,n=void 0;if(Re)e="<remove></remove>"+e;else{var r=g(e,/^[\r\n\t ]+/);n=r&&r[0]}"application/xhtml+xml"===Je&&(e='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+e+"</body></html>");var i=re?re.createHTML(e):e;if(Ye===qe)try{t=(new q).parseFromString(i,Je)}catch(e){}if(!t||!t.documentElement){t=ae.createDocument(Ye,"template",null);try{t.documentElement.innerHTML=Xe?"":i}catch(e){}}var a=t.body||t.documentElement;return e&&n&&a.insertBefore(o.createTextNode(n),a.childNodes[0]||null),Ye===qe?ce.call(t,Te?"html":"body")[0]:Te?t.documentElement:a},ht=function(e){return se.call(e.ownerDocument||e,e,u.SHOW_ELEMENT|u.SHOW_COMMENT|u.SHOW_TEXT,null,!1)},mt=function(e){return e instanceof Z&&("string"!=typeof e.nodeName||"string"!=typeof e.textContent||"function"!=typeof e.removeChild||!(e.attributes instanceof C)||"function"!=typeof e.removeAttribute||"function"!=typeof e.setAttribute||"string"!=typeof e.namespaceURI||"function"!=typeof e.insertBefore)},gt=function(e){return"object"===(void 0===l?"undefined":V(l))?e instanceof l:e&&"object"===(void 0===e?"undefined":V(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName},vt=function(e,t,r){pe[e]&&p(pe[e],(function(e){e.call(n,t,r,nt)}))},bt=function(e){var t=void 0;if(vt("beforeSanitizeElements",e,null),mt(e))return dt(e),!0;if(g(e.nodeName,/[\u0080-\uFFFF]/))return dt(e),!0;var r=tt(e.nodeName);if(vt("uponSanitizeElement",e,{tagName:r,allowedTags:Ae}),!gt(e.firstElementChild)&&(!gt(e.content)||!gt(e.content.firstElementChild))&&A(/<[/\w]/g,e.innerHTML)&&A(/<[/\w]/g,e.textContent))return dt(e),!0;if("select"===r&&A(/<template/i,e.innerHTML))return dt(e),!0;if(!Ae[r]||Se[r]){if(Be&&!Ue[r]){var o=te(e)||e.parentNode,i=ee(e)||e.childNodes;if(i&&o)for(var a=i.length-1;a>=0;--a)o.insertBefore(J(i[a],!0),Q(e))}if(!Se[r]&&At(r)){if(ke.tagNameCheck instanceof RegExp&&A(ke.tagNameCheck,r))return!1;if(ke.tagNameCheck instanceof Function&&ke.tagNameCheck(r))return!1}return dt(e),!0}return e instanceof c&&!ut(e)?(dt(e),!0):"noscript"!==r&&"noembed"!==r||!A(/<\/no(script|embed)/i,e.innerHTML)?(Oe&&3===e.nodeType&&(t=e.textContent,t=v(t,fe," "),t=v(t,he," "),e.textContent!==t&&(h(n.removed,{element:e.cloneNode()}),e.textContent=t)),vt("afterSanitizeElements",e,null),!1):(dt(e),!0)},yt=function(e,t,n){if(Le&&("id"===t||"name"===t)&&(n in o||n in rt))return!1;if(_e&&!Ee[t]&&A(me,t));else if(Ie&&A(ge,t));else if(!Ce[t]||Ee[t]){if(!(At(e)&&(ke.tagNameCheck instanceof RegExp&&A(ke.tagNameCheck,e)||ke.tagNameCheck instanceof Function&&ke.tagNameCheck(e))&&(ke.attributeNameCheck instanceof RegExp&&A(ke.attributeNameCheck,t)||ke.attributeNameCheck instanceof Function&&ke.attributeNameCheck(t))||"is"===t&&ke.allowCustomizedBuiltInElements&&(ke.tagNameCheck instanceof RegExp&&A(ke.tagNameCheck,n)||ke.tagNameCheck instanceof Function&&ke.tagNameCheck(n))))return!1}else if(We[t]);else if(A(ye,v(n,be,"")));else if("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==b(n,"data:")||!$e[e])if(je&&!A(ve,v(n,be,"")));else if(n)return!1;return!0},At=function(e){return e.indexOf("-")>0},xt=function(e){var t=void 0,r=void 0,o=void 0,i=void 0;vt("beforeSanitizeAttributes",e,null);var a=e.attributes;if(a){var s={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:Ce};for(i=a.length;i--;){var l=t=a[i],c=l.name,u=l.namespaceURI;if(r=y(t.value),o=tt(c),s.attrName=o,s.attrValue=r,s.keepAttr=!0,s.forceKeepAttr=void 0,vt("uponSanitizeAttribute",e,s),r=s.attrValue,!s.forceKeepAttr&&(pt(c,e),s.keepAttr))if(A(/\/>/i,r))pt(c,e);else{Oe&&(r=v(r,fe," "),r=v(r,he," "));var d=tt(e.nodeName);if(yt(d,o,r))try{u?e.setAttributeNS(u,c,r):e.setAttribute(c,r),f(n.removed)}catch(e){}}}vt("afterSanitizeAttributes",e,null)}},Ct=function e(t){var n=void 0,r=ht(t);for(vt("beforeSanitizeShadowDOM",t,null);n=r.nextNode();)vt("uponSanitizeShadowNode",n,null),bt(n)||(n.content instanceof a&&e(n.content),xt(n));vt("afterSanitizeShadowDOM",t,null)};return n.sanitize=function(e,o){var i=void 0,s=void 0,c=void 0,u=void 0,d=void 0;if((Xe=!e)&&(e="\x3c!--\x3e"),"string"!=typeof e&&!gt(e)){if("function"!=typeof e.toString)throw x("toString is not a function");if("string"!=typeof(e=e.toString()))throw x("dirty is not a string, aborting")}if(!n.isSupported){if("object"===V(t.toStaticHTML)||"function"==typeof t.toStaticHTML){if("string"==typeof e)return t.toStaticHTML(e);if(gt(e))return t.toStaticHTML(e.outerHTML)}return e}if(Ne||it(o),n.removed=[],"string"==typeof e&&(He=!1),He);else if(e instanceof l)1===(s=(i=ft("\x3c!----\x3e")).ownerDocument.importNode(e,!0)).nodeType&&"BODY"===s.nodeName||"HTML"===s.nodeName?i=s:i.appendChild(s);else{if(!Pe&&!Oe&&!Te&&-1===e.indexOf("<"))return re&&Me?re.createHTML(e):e;if(!(i=ft(e)))return Pe?null:oe}i&&Re&&dt(i.firstChild);for(var p=ht(He?e:i);c=p.nextNode();)3===c.nodeType&&c===u||bt(c)||(c.content instanceof a&&Ct(c.content),xt(c),u=c);if(u=null,He)return e;if(Pe){if(De)for(d=le.call(i.ownerDocument);i.firstChild;)d.appendChild(i.firstChild);else d=i;return Ce.shadowroot&&(d=ue.call(r,d,!0)),d}var f=Te?i.outerHTML:i.innerHTML;return Oe&&(f=v(f,fe," "),f=v(f,he," ")),re&&Me?re.createHTML(f):f},n.setConfig=function(e){it(e),Ne=!0},n.clearConfig=function(){nt=null,Ne=!1},n.isValidAttribute=function(e,t,n){nt||it({});var r=tt(e),o=tt(t);return yt(r,o,n)},n.addHook=function(e,t){"function"==typeof t&&(pe[e]=pe[e]||[],h(pe[e],t))},n.removeHook=function(e){pe[e]&&f(pe[e])},n.removeHooks=function(e){pe[e]&&(pe[e]=[])},n.removeAllHooks=function(){pe={}},n}()}()},679:function(e,t,n){"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=f(n);o&&o!==h&&e(t,o,r)}var a=u(n);d&&(a=a.concat(d(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var v=a[g];if(!(i[v]||r&&r[v]||m&&m[v]||s&&s[v])){var b=p(n,v);try{c(t,v,b)}catch(e){}}}}return t}},103:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case i:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case c:case p:case g:case m:case l:return e;default:return t}}case o:return t}}}function C(e){return x(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return C(e)||x(e)===u},t.isConcurrentMode=C,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===i},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===s},t.isStrictMode=function(e){return x(e)===a},t.isSuspense=function(e){return x(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===s||e===a||e===f||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===y||e.$$typeof===A||e.$$typeof===v)},t.typeOf=x},296:function(e,t,n){"use strict";e.exports=n(103)},139:function(e){var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,n=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,i=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,s=/^[;\s]*/,l=/^\s+|\s+$/g,c="";function u(e){return e?e.replace(l,c):c}e.exports=function(e,l){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];l=l||{};var d=1,p=1;function f(e){var t=e.match(n);t&&(d+=t.length);var r=e.lastIndexOf("\n");p=~r?e.length-r:p+e.length}function h(){var e={line:d,column:p};return function(t){return t.position=new m(e),y(),t}}function m(e){this.start=e,this.end={line:d,column:p},this.source=l.source}m.prototype.content=e;var g=[];function v(t){var n=new Error(l.source+":"+d+":"+p+": "+t);if(n.reason=t,n.filename=l.source,n.line=d,n.column=p,n.source=e,!l.silent)throw n;g.push(n)}function b(t){var n=t.exec(e);if(n){var r=n[0];return f(r),e=e.slice(r.length),n}}function y(){b(r)}function A(e){var t;for(e=e||[];t=x();)!1!==t&&e.push(t);return e}function x(){var t=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var n=2;c!=e.charAt(n)&&("*"!=e.charAt(n)||"/"!=e.charAt(n+1));)++n;if(n+=2,c===e.charAt(n-1))return v("End of comment missing");var r=e.slice(2,n-2);return p+=2,f(r),e=e.slice(n),p+=2,t({type:"comment",comment:r})}}function C(){var e=h(),n=b(o);if(n){if(x(),!b(i))return v("property missing ':'");var r=b(a),l=e({type:"declaration",property:u(n[0].replace(t,c)),value:r?u(r[0].replace(t,c)):c});return b(s),l}}return y(),function(){var e,t=[];for(A(t);e=C();)!1!==e&&(t.push(e),A(t));return t}()}},418:function(e){"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,l=o(e),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(t){s=t(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},703:function(e,t,n){"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},697:function(e,t,n){e.exports=n(703)()},414:function(e){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},206:function(e){"use strict";const t=(e,t,n)=>{const r=t<0?e.length+t:t;if(r>=0&&r<e.length){const r=n<0?e.length+n:n,[o]=e.splice(t,1);e.splice(r,0,o)}};e.exports=(e,n,r)=>(e=[...e],t(e,n,r),e),e.exports.mutate=t},921:function(e,t){"use strict";var n=60103,r=60106,o=60107,i=60108,a=60114,s=60109,l=60110,c=60112,u=60113,d=60120,p=60115,f=60116,h=60121,m=60122,g=60117,v=60129,b=60131;if("function"==typeof Symbol&&Symbol.for){var y=Symbol.for;n=y("react.element"),r=y("react.portal"),o=y("react.fragment"),i=y("react.strict_mode"),a=y("react.profiler"),s=y("react.provider"),l=y("react.context"),c=y("react.forward_ref"),u=y("react.suspense"),d=y("react.suspense_list"),p=y("react.memo"),f=y("react.lazy"),h=y("react.block"),m=y("react.server.block"),g=y("react.fundamental"),v=y("react.debug_trace_mode"),b=y("react.legacy_hidden")}t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===a||e===v||e===i||e===u||e===d||e===b||"object"==typeof e&&null!==e&&(e.$$typeof===f||e.$$typeof===p||e.$$typeof===s||e.$$typeof===l||e.$$typeof===c||e.$$typeof===g||e.$$typeof===h||e[0]===m)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case u:case d:return e;default:switch(e=e&&e.$$typeof){case l:case c:case f:case p:case s:return e;default:return t}}case r:return t}}}},864:function(e,t,n){"use strict";e.exports=n(921)},251:function(e,t,n){"use strict";n(418);var r=n(196),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),t.Fragment=i("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,i={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:c,ref:u,props:i,_owner:a.current}}t.jsx=c,t.jsxs=c},893:function(e,t,n){"use strict";e.exports=n(251)},774:function(e){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<i.length;l++){var c=i[l];if(!s(c))return!1;var u=e[c],d=t[c];if(!1===(o=n?n.call(r,u,d,c):void 0)||void 0===o&&u!==d)return!1}return!0}},379:function(e){"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var p=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=o(f,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:function(e){"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},476:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};t.__esModule=!0;var o=r(n(848)),i=n(678);t.default=function(e,t){var n={};return e&&"string"==typeof e?((0,o.default)(e,(function(e,r){e&&r&&(n[(0,i.camelCase)(e,t)]=r)})),n):n}},678:function(e,t){"use strict";t.__esModule=!0,t.camelCase=void 0;var n=/^--[a-zA-Z0-9-]+$/,r=/-([a-z])/g,o=/^[^-]+$/,i=/^-(webkit|moz|ms|o|khtml)-/,a=/^-(ms)-/,s=function(e,t){return t.toUpperCase()},l=function(e,t){return"".concat(t,"-")};t.camelCase=function(e,t){return void 0===t&&(t={}),function(e){return!e||o.test(e)||n.test(e)}(e)?e:(e=e.toLowerCase(),(e=t.reactCompat?e.replace(a,l):e.replace(i,l)).replace(r,s))}},848:function(e,t,n){var r=n(139);e.exports=function(e,t){var n,o=null;if(!e||"string"!=typeof e)return o;for(var i,a,s=r(e),l="function"==typeof t,c=0,u=s.length;c<u;c++)i=(n=s[c]).property,a=n.value,l?t(i,a,n):a&&(o||(o={}),o[i]=a);return o}},196:function(e){"use strict";e.exports=window.React}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";var e=window.wp.plugins,t=n(893),r=function(){var e=1,t=new WeakMap,n=function(r,o){return"number"==typeof r||"string"==typeof r?o?"idx-"+o:"val-"+r:t.has(r)?"uid"+t.get(r):(t.set(r,e++),n(r))};return n}(),o=window.wp.data,i=window.wp.editPost,a=window.wp.coreData,s=window.lodash,l=function(){return l=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},l.apply(this,arguments)},c=function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=null);var r=function(e,t){void 0===e&&(e=null),void 0===t&&(t=null);var n=(0,o.useSelect)((function(t){return e||t("core/editor").getCurrentPostType()}),[]),r=(0,a.useEntityProp)("postType",n,"meta",t),i=r[0],l=r[1],c="function"==typeof l?l:function(){return console.error("Error attempting to set post meta for post type ".concat(n,". Does it have support for custom-fields?"))};return["object"==typeof i?i:{},function(e){return c((0,s.cloneDeep)(e))}]}(t,n),i=r[0],c=r[1];return[i[e],function(t){var n;return c(l(l({},i),((n={})[e]=t,n)))}]},u=n(196),d=n.n(u);function p(e){return function(t){return!!t.type&&t.type.tabsRole===e}}var f=p("Tab"),h=p("TabList"),m=p("TabPanel");function g(){return g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},g.apply(this,arguments)}function v(e,t){return u.Children.map(e,(function(e){return null===e?null:function(e){return f(e)||h(e)||m(e)}(e)?t(e):e.props&&e.props.children&&"object"==typeof e.props.children?(0,u.cloneElement)(e,g({},e.props,{children:v(e.props.children,t)})):e}))}function b(e,t){return u.Children.forEach(e,(function(e){null!==e&&(f(e)||m(e)?t(e):e.props&&e.props.children&&"object"==typeof e.props.children&&(h(e)&&t(e),b(e.props.children,t)))}))}function y(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=y(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}var A=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=y(e))&&(r&&(r+=" "),r+=t);return r},x=0;function C(){return"react-tabs-"+x++}function w(e){var t=0;return b(e,(function(e){f(e)&&t++})),t}var k,S=["children","className","disabledTabClassName","domRef","focus","forceRenderTabPanel","onSelect","selectedIndex","selectedTabClassName","selectedTabPanelClassName","environment","disableUpDownKeys"];function E(){return E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},E.apply(this,arguments)}function I(e){return e&&"getAttribute"in e}function _(e){return I(e)&&e.getAttribute("data-rttab")}function j(e){return I(e)&&"true"===e.getAttribute("aria-disabled")}var O=function(e){var t=(0,u.useRef)([]),n=(0,u.useRef)([]),r=(0,u.useRef)([]),o=(0,u.useRef)();function i(t,n){t<0||t>=l()||(0,e.onSelect)(t,e.selectedIndex,n)}function a(e){for(var t=l(),n=e+1;n<t;n++)if(!j(c(n)))return n;for(var r=0;r<e;r++)if(!j(c(r)))return r;return e}function s(e){for(var t=e;t--;)if(!j(c(t)))return t;for(t=l();t-- >e;)if(!j(c(t)))return t;return e}function l(){return w(e.children)}function c(e){return t.current["tabs-"+e]}function p(e){var t=e.target;do{if(g(t)){if(j(t))return;return void i([].slice.call(t.parentNode.children).filter(_).indexOf(t),e)}}while(null!=(t=t.parentNode))}function g(e){if(!_(e))return!1;var t=e.parentElement;do{if(t===o.current)return!0;if(t.getAttribute("data-rttabs"))break;t=t.parentElement}while(t);return!1}e.children;var b=e.className,y=(e.disabledTabClassName,e.domRef),x=(e.focus,e.forceRenderTabPanel,e.onSelect,e.selectedIndex,e.selectedTabClassName,e.selectedTabPanelClassName,e.environment,e.disableUpDownKeys,function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,S));return d().createElement("div",E({},x,{className:A(b),onClick:p,onKeyDown:function(t){var n=e.direction,r=e.disableUpDownKeys;if(g(t.target)){var o=e.selectedIndex,u=!1,d=!1;"Space"!==t.code&&32!==t.keyCode&&"Enter"!==t.code&&13!==t.keyCode||(u=!0,d=!1,p(t)),"ArrowLeft"!==t.code&&37!==t.keyCode&&(r||38!==t.keyCode&&"ArrowUp"!==t.code)?"ArrowRight"!==t.code&&39!==t.keyCode&&(r||40!==t.keyCode&&"ArrowDown"!==t.code)?35===t.keyCode||"End"===t.code?(o=function(){for(var e=l();e--;)if(!j(c(e)))return e;return null}(),u=!0,d=!0):36!==t.keyCode&&"Home"!==t.code||(o=function(){for(var e=l(),t=0;t<e;t++)if(!j(c(t)))return t;return null}(),u=!0,d=!0):(o="rtl"===n?s(o):a(o),u=!0,d=!0):(o="rtl"===n?a(o):s(o),u=!0,d=!0),u&&t.preventDefault(),d&&i(o,t)}},ref:function(e){o.current=e,y&&y(e)},"data-rttabs":!0}),function(){var o=0,i=e.children,a=e.disabledTabClassName,s=e.focus,p=e.forceRenderTabPanel,g=e.selectedIndex,b=e.selectedTabClassName,y=e.selectedTabPanelClassName,A=e.environment;n.current=n.current||[],r.current=r.current||[];for(var x=n.current.length-l();x++<0;)n.current.push(C()),r.current.push(C());return v(i,(function(e){var i=e;if(h(e)){var l=0,x=!1;null==k&&function(e){var t=e||("undefined"!=typeof window?window:void 0);try{k=!(void 0===t||!t.document||!t.document.activeElement)}catch(e){k=!1}}(A);var C=A||("undefined"!=typeof window?window:void 0);k&&C&&(x=d().Children.toArray(e.props.children).filter(f).some((function(e,t){return C.document.activeElement===c(t)}))),i=(0,u.cloneElement)(e,{children:v(e.props.children,(function(e){var o="tabs-"+l,i=g===l,c={tabRef:function(e){t.current[o]=e},id:n.current[l],panelId:r.current[l],selected:i,focus:i&&(s||x)};return b&&(c.selectedClassName=b),a&&(c.disabledClassName=a),l++,(0,u.cloneElement)(e,c)}))})}else if(m(e)){var w={id:r.current[o],tabId:n.current[o],selected:g===o};p&&(w.forceRender=p),y&&(w.selectedClassName=y),o++,i=(0,u.cloneElement)(e,w)}return i}))}())};O.defaultProps={className:"react-tabs",focus:!1},O.propTypes={};var T=O;function N(){return N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},N.apply(this,arguments)}var R=function(e){var t=e.children,n=e.defaultFocus,r=e.defaultIndex,o=e.focusTabOnClick,i=e.onSelect,a=(0,u.useState)(n),s=a[0],l=a[1],c=(0,u.useState)(function(e){return null===e.selectedIndex?1:0}(e)),p=c[0],f=(0,u.useState)(1===p?r||0:null),h=f[0],m=f[1];if((0,u.useEffect)((function(){l(!1)}),[]),1===p){var g=w(t);(0,u.useEffect)((function(){if(null!=h){var e=Math.max(0,g-1);m(Math.min(h,e))}}),[g])}var v=N({},e);return v.focus=s,v.onSelect=function(e,t,n){"function"==typeof i&&!1===i(e,t,n)||(o&&l(!0),1===p&&m(e))},null!=h&&(v.selectedIndex=h),delete v.defaultFocus,delete v.defaultIndex,delete v.focusTabOnClick,d().createElement(T,v,t)};R.propTypes={},R.defaultProps={defaultFocus:!1,focusTabOnClick:!0,forceRenderTabPanel:!1,selectedIndex:null,defaultIndex:null,environment:null,disableUpDownKeys:!1},R.tabsRole="Tabs";var P=R,D=["children","className"];function M(){return M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M.apply(this,arguments)}var L=function(e){var t=e.children,n=e.className,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,D);return d().createElement("ul",M({},r,{className:A(n),role:"tablist"}),t)};L.tabsRole="TabList",L.propTypes={},L.defaultProps={className:"react-tabs__tab-list"};var B=L,H=["children","className","disabled","disabledClassName","focus","id","panelId","selected","selectedClassName","tabIndex","tabRef"];function F(){return F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F.apply(this,arguments)}var U="react-tabs__tab",z={className:U,disabledClassName:U+"--disabled",focus:!1,id:null,panelId:null,selected:!1,selectedClassName:U+"--selected"},$=function(e){var t,n=(0,u.useRef)(),r=e.children,o=e.className,i=e.disabled,a=e.disabledClassName,s=e.focus,l=e.id,c=e.panelId,p=e.selected,f=e.selectedClassName,h=e.tabIndex,m=e.tabRef,g=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,H);return(0,u.useEffect)((function(){p&&s&&n.current.focus()}),[p,s]),d().createElement("li",F({},g,{className:A(o,(t={},t[f]=p,t[a]=i,t)),ref:function(e){n.current=e,m&&m(e)},role:"tab",id:l,"aria-selected":p?"true":"false","aria-disabled":i?"true":"false","aria-controls":c,tabIndex:h||(p?"0":null),"data-rttab":!0}),r)};$.propTypes={},$.tabsRole="Tab",$.defaultProps=z;var V=$,W=["children","className","forceRender","id","selected","selectedClassName","tabId"];function G(){return G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},G.apply(this,arguments)}var K={className:"react-tabs__tab-panel",forceRender:!1,selectedClassName:"react-tabs__tab-panel--selected"},Z=function(e){var t,n=e.children,r=e.className,o=e.forceRender,i=e.id,a=e.selected,s=e.selectedClassName,l=e.tabId,c=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,W);return d().createElement("div",G({},c,{className:A(r,(t={},t[s]=a,t)),role:"tabpanel",id:i,"aria-labelledby":l}),o||a?n:null)};Z.tabsRole="TabPanel",Z.propTypes={},Z.defaultProps=K;var q=Z,Y=n(856),X=n.n(Y),J=n(697),Q=n.n(J);function ee(e){var n=e.className,r=e.html,o=e.tag;return(0,t.jsx)(o,{className:n,dangerouslySetInnerHTML:{__html:X().sanitize(r)}},void 0)}ee.defaultProps={className:""},ee.propTypes={className:Q().string,html:Q().string.isRequired,tag:Q().string.isRequired};var te,ne=ee,re=window.wp.components;function oe(e){var n=e.field,r=n.name,o=n.checked_value,i=e.valueHook,a=e.index,s=void 0===a?null:a,l=e.label,c=void 0===l?"":l,u=i(null!==s?s:r),d=u[0],p=u[1],f="object"!=typeof d||Array.isArray(d)?d:d[r];return"boolean"!=typeof f&&(f="1"===f),(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)(re.CheckboxControl,{label:c,onChange:function(e){var t,n;p(e?"object"==typeof d?((t={})[r]=o.toString(),t):o.toString():"object"==typeof d?((n={})[r]="",n):"")},checked:f,value:o},void 0)},void 0)}var ie=new Uint8Array(16);function ae(){if(!te&&!(te="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return te(ie)}for(var se=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,le=function(e){return"string"==typeof e&&se.test(e)},ce=[],ue=0;ue<256;++ue)ce.push((ue+256).toString(16).substr(1));var de=function(e,t,n){var r=(e=e||{}).random||(e.rng||ae)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var o=0;o<16;++o)t[n+o]=r[o];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(ce[e[t+0]]+ce[e[t+1]]+ce[e[t+2]]+ce[e[t+3]]+"-"+ce[e[t+4]]+ce[e[t+5]]+"-"+ce[e[t+6]]+ce[e[t+7]]+"-"+ce[e[t+8]]+ce[e[t+9]]+"-"+ce[e[t+10]]+ce[e[t+11]]+ce[e[t+12]]+ce[e[t+13]]+ce[e[t+14]]+ce[e[t+15]]).toLowerCase();if(!le(n))throw TypeError("Stringified UUID is invalid");return n}(r)};function pe(e){return e.map((function(e){return{label:e.name,value:e.value}}))}var fe=n(379),he=n.n(fe),me=n(795),ge=n.n(me),ve=n(569),be=n.n(ve),ye=n(565),Ae=n.n(ye),xe=n(216),Ce=n.n(xe),we=n(589),ke=n.n(we),Se=n(916),Ee={};Ee.styleTagTransform=ke(),Ee.setAttributes=Ae(),Ee.insert=be().bind(null,"head"),Ee.domAPI=ge(),Ee.insertStyleElement=Ce(),he()(Se.Z,Ee),Se.Z&&Se.Z.locals&&Se.Z.locals;var Ie=function(){return Ie=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ie.apply(this,arguments)};function _e(e){var n=e.field,r=n.data,o=n.datasource,i=void 0===o?{}:o,a=n.name,s=e.valueHook,l=e.index,c=void 0===l?null:l,u=e.label,d=void 0===u?"":u,p=s(null!==c?c:a),f=p[0],h=p[1],m="object"==typeof f&&Array.isArray(f)?f.map((function(e){return e.toString()})):[f],g={};null!==i&&(g=i.options);var v=pe(r);0===v.length&&Object.entries(g).length>0&&(v=Object.entries(g).map((function(e){var t;return{label:null!==(t=e[1].toString())&&void 0!==t?t:e[0].toString(),value:e[0]}})));var b=de();return(0,t.jsx)(re.PanelRow,{children:(0,t.jsxs)("div",Ie({style:{flexDirection:"column"}},{children:[(0,t.jsx)("label",Ie({htmlFor:"checkboxes-".concat(b)},{children:d}),void 0),(0,t.jsx)("div",Ie({id:"checkboxes-".concat(b)},{children:v.map((function(e){var n=e.label,r=e.value;return(0,t.jsx)(re.CheckboxControl,{label:n,value:r,onChange:function(e){return function(e,t){var n=Number.isNaN(parseInt(e,10))?e:parseInt(e,10),r=v.filter((function(e){var r=e.value;return r.toString()===n.toString()?t:m.includes(r)})).map((function(e){return Number.isNaN(parseInt(e.value,10))?e.value:parseInt(e.value,10)}));h(r)}(r,e)},checked:m.includes(r.toString())},void 0)}))}),void 0)]}),void 0)},void 0)}var je=window.wp.i18n,Oe=n(615),Te={};Te.styleTagTransform=ke(),Te.setAttributes=Ae(),Te.insert=be().bind(null,"head"),Te.domAPI=ge(),Te.insertStyleElement=Ce(),he()(Oe.Z,Te),Oe.Z&&Oe.Z.locals&&Oe.Z.locals;var Ne=function(){return Ne=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ne.apply(this,arguments)};function Re(e){var n=e.field.name,r=e.valueHook,o=e.index,i=void 0===o?null:o,a=e.label,s=void 0===a?"":a,l=(0,u.useState)(!1),c=l[0],d=l[1],p=r(null!==i?i:n),f=p[0],h=p[1],m="object"==typeof f?f[n]:f;return(0,t.jsx)(re.PanelRow,{children:(0,t.jsxs)("div",Ne({className:"fm-gutenberg-flex__column fm-gutenberg-popup-wrap"},{children:[(0,t.jsx)("label",Ne({htmlFor:"".concat(n,"_").concat(i)},{children:s}),void 0),(0,t.jsxs)("div",Ne({id:"".concat(n,"_").concat(i)},{children:[(0,t.jsxs)(re.Button,Ne({id:"".concat(n,"_").concat(i),className:"fm-gutenberg-color-preview",onClick:function(){return d(!c)},variant:"secondary"},{children:[(0,t.jsx)("span",{style:{backgroundColor:f}},void 0),(0,je.__)("Select Color","fm-gutenberg")]}),void 0),c?(0,t.jsxs)("div",Ne({className:"fm-gutenberg-popup"},{children:[(0,t.jsx)(re.Button,Ne({"aria-label":(0,je.__)("Close","fm-gutenberg"),onClick:function(){return d(!1)},className:"fm-gutenberg-popup__close"},{children:"x"}),void 0),(0,t.jsx)(re.ColorPicker,{color:m,onChange:function(e){h(e)}},void 0)]}),void 0):null]}),void 0)]}),void 0)},void 0)}var Pe=window.wp.date,De=n(222),Me={};Me.styleTagTransform=ke(),Me.setAttributes=Ae(),Me.insert=be().bind(null,"head"),Me.domAPI=ge(),Me.insertStyleElement=Ce(),he()(De.Z,Me),De.Z&&De.Z.locals&&De.Z.locals;var Le=function(){return Le=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Le.apply(this,arguments)};function Be(e){var n=e.field,r=n.attributes,o=void 0===r?{}:r,i=n.date_format,a=void 0===i?"Y-m-d":i,s=n.description,l=void 0===s?"":s,c=n.description_after_element,d=void 0===c||c,p=n.name,f=n.use_time,h=void 0!==f&&f,m=e.valueHook,g=e.index,v=void 0===g?null:g,b=e.label,y=void 0===b?"":b,A=(0,u.useState)(!1),x=A[0],C=A[1],w=m(null!==v?v:p),k=w[0],S=w[1],E=k&&"object"==typeof k&&!Array.isArray(k)?k[p]:k;E=E?String(E):"";var I=(0,Pe.__experimentalGetSettings)().timezone,_=(void 0===I?{}:I).offset,j=void 0===_?0:_,O=function(e){S((0,Pe.getDate)(e).getTime()/1e3+60*j*60),C(!1)},T=h?"".concat(a," g:i a"):a,N=E?(0,Pe.gmdateI18n)(T,new Date(1e3*parseInt(E,10))):null;return(0,t.jsx)(re.PanelRow,{children:(0,t.jsxs)("div",Le({className:"fm-gutenberg-flex__column fm-gutenberg-popup-wrap"},{children:[l&&!d?(0,t.jsx)("div",Le({className:"fm-gutenberg-item__description"},{children:l}),void 0):null,(0,t.jsx)("label",Le({htmlFor:"".concat(p,"_").concat(v)},{children:y}),void 0),(0,t.jsx)(re.TextControl,{id:"".concat(p,"_").concat(v),value:N,onClick:function(){return C(!x)},onChange:function(e){S((0,Pe.getDate)(e).getTime()/1e3),C(!1)}},void 0),x&&!h?(0,t.jsxs)("div",Le({className:"fm-gutenberg-popup"},{children:[(0,t.jsx)(re.Button,Le({"aria-label":(0,je.__)("Close","fm-gutenberg"),onClick:function(){return C(!1)},className:"fm-gutenberg-popup__close"},{children:"x"}),void 0),(0,u.createElement)(re.DatePicker,Le({},o,{onChange:O,currentDate:N,key:"text-control-".concat(p,"-").concat(v)}))]}),void 0):null,x&&h?(0,t.jsxs)("div",Le({className:"fm-gutenberg-popup"},{children:[(0,t.jsx)(re.Button,Le({"aria-label":(0,je.__)("Close","fm-gutenberg"),className:"fm-gutenberg-popup__close",onClick:function(){return C(!1)}},{children:"x"}),void 0),(0,u.createElement)(re.DateTimePicker,Le({},o,{onChange:O,currentDate:N,key:"text-control-".concat(p,"-").concat(v),is12Hour:!0}))]}),void 0):null,l&&d?(0,t.jsx)("div",Le({className:"fm-gutenberg-item__description"},{children:l}),void 0):null]}),void 0)},void 0)}var He,Fe=window.wp.blockEditor,Ue=n(864),ze=n(774),$e=n.n(ze),Ve=function(e){function t(e,r,l,c,p){for(var f,h,m,g,A,C=0,w=0,k=0,S=0,E=0,N=0,P=m=f=0,M=0,L=0,B=0,H=0,F=l.length,U=F-1,z="",$="",V="",W="";M<F;){if(h=l.charCodeAt(M),M===U&&0!==w+S+k+C&&(0!==w&&(h=47===w?10:47),S=k=C=0,F++,U++),0===w+S+k+C){if(M===U&&(0<L&&(z=z.replace(d,"")),0<z.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:z+=l.charAt(M)}h=59}switch(h){case 123:for(f=(z=z.trim()).charCodeAt(0),m=1,H=++M;M<F;){switch(h=l.charCodeAt(M)){case 123:m++;break;case 125:m--;break;case 47:switch(h=l.charCodeAt(M+1)){case 42:case 47:e:{for(P=M+1;P<U;++P)switch(l.charCodeAt(P)){case 47:if(42===h&&42===l.charCodeAt(P-1)&&M+2!==P){M=P+1;break e}break;case 10:if(47===h){M=P+1;break e}}M=P}}break;case 91:h++;case 40:h++;case 34:case 39:for(;M++<U&&l.charCodeAt(M)!==h;);}if(0===m)break;M++}if(m=l.substring(H,M),0===f&&(f=(z=z.replace(u,"").trim()).charCodeAt(0)),64===f){switch(0<L&&(z=z.replace(d,"")),h=z.charCodeAt(1)){case 100:case 109:case 115:case 45:L=r;break;default:L=T}if(H=(m=t(r,L,m,h,p+1)).length,0<R&&(A=s(3,m,L=n(T,z,B),r,_,I,H,h,p,c),z=L.join(""),void 0!==A&&0===(H=(m=A.trim()).length)&&(h=0,m="")),0<H)switch(h){case 115:z=z.replace(x,a);case 100:case 109:case 45:m=z+"{"+m+"}";break;case 107:m=(z=z.replace(v,"$1 $2"))+"{"+m+"}",m=1===O||2===O&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=z+m,112===c&&($+=m,m="")}else m=""}else m=t(r,n(r,z,B),m,c,p+1);V+=m,m=B=L=P=f=0,z="",h=l.charCodeAt(++M);break;case 125:case 59:if(1<(H=(z=(0<L?z.replace(d,""):z).trim()).length))switch(0===P&&(f=z.charCodeAt(0),45===f||96<f&&123>f)&&(H=(z=z.replace(" ",":")).length),0<R&&void 0!==(A=s(1,z,r,e,_,I,$.length,c,p,c))&&0===(H=(z=A.trim()).length)&&(z="\0\0"),f=z.charCodeAt(0),h=z.charCodeAt(1),f){case 0:break;case 64:if(105===h||99===h){W+=z+l.charAt(M);break}default:58!==z.charCodeAt(H-1)&&($+=o(z,f,h,z.charCodeAt(2)))}B=L=P=f=0,z="",h=l.charCodeAt(++M)}}switch(h){case 13:case 10:47===w?w=0:0===1+f&&107!==c&&0<z.length&&(L=1,z+="\0"),0<R*D&&s(0,z,r,e,_,I,$.length,c,p,c),I=1,_++;break;case 59:case 125:if(0===w+S+k+C){I++;break}default:switch(I++,g=l.charAt(M),h){case 9:case 32:if(0===S+C+w)switch(E){case 44:case 58:case 9:case 32:g="";break;default:32!==h&&(g=" ")}break;case 0:g="\\0";break;case 12:g="\\f";break;case 11:g="\\v";break;case 38:0===S+w+C&&(L=B=1,g="\f"+g);break;case 108:if(0===S+w+C+j&&0<P)switch(M-P){case 2:112===E&&58===l.charCodeAt(M-3)&&(j=E);case 8:111===N&&(j=N)}break;case 58:0===S+w+C&&(P=M);break;case 44:0===w+k+S+C&&(L=1,g+="\r");break;case 34:case 39:0===w&&(S=S===h?0:0===S?h:S);break;case 91:0===S+w+k&&C++;break;case 93:0===S+w+k&&C--;break;case 41:0===S+w+C&&k--;break;case 40:0===S+w+C&&(0===f&&(2*E+3*N==533||(f=1)),k++);break;case 64:0===w+k+S+C+P+m&&(m=1);break;case 42:case 47:if(!(0<S+C+k))switch(w){case 0:switch(2*h+3*l.charCodeAt(M+1)){case 235:w=47;break;case 220:H=M,w=42}break;case 42:47===h&&42===E&&H+2!==M&&(33===l.charCodeAt(H+2)&&($+=l.substring(H,M+1)),g="",w=0)}}0===w&&(z+=g)}N=E,E=h,M++}if(0<(H=$.length)){if(L=r,0<R&&void 0!==(A=s(2,$,L,e,_,I,H,c,p,c))&&0===($=A).length)return W+$+V;if($=L.join(",")+"{"+$+"}",0!=O*j){switch(2!==O||i($,2)||(j=0),j){case 111:$=$.replace(y,":-moz-$1")+$;break;case 112:$=$.replace(b,"::-webkit-input-$1")+$.replace(b,"::-moz-$1")+$.replace(b,":-ms-input-$1")+$}j=0}}return W+$+V}function n(e,t,n){var o=t.trim().split(m);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var s=0;for(e=0===a?"":e[0]+" ";s<i;++s)t[s]=r(e,t[s],n).trim();break;default:var l=s=0;for(t=[];s<i;++s)for(var c=0;c<a;++c)t[l++]=r(e[c]+" ",o[s],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(g,"$1"+e.trim());case 58:return e.trim()+t.replace(g,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var a=e+";",s=2*t+3*n+4*r;if(944===s){e=a.indexOf(":",9)+1;var l=a.substring(e,a.length-1).trim();return l=a.substring(0,e).trim()+l+";",1===O||2===O&&i(l,1)?"-webkit-"+l+l:l}if(0===O||2===O&&!i(a,1))return a;switch(s){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(E,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(l=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+l+a;case 1005:return f.test(a)?a.replace(p,":-webkit-")+a.replace(p,":-moz-")+a:a;case 1e3:switch(t=(l=a.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=a.replace(A,"tb");break;case 232:l=a.replace(A,"tb-rl");break;case 220:l=a.replace(A,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+l+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,s=(l=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:a=a.replace(l,"-webkit-"+l)+";"+a;break;case 207:case 102:a=a.replace(l,"-webkit-"+(102<s?"inline-":"")+"box")+";"+a.replace(l,"-webkit-"+l)+";"+a.replace(l,"-ms-"+l+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return l=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+l+"-ms-flex-"+l+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(w,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(w,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(l,"-webkit-"+l)+a.replace(l,"-moz-"+l.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),P(2!==t?r:r.replace(k,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(C," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,i,a,s,l,u){for(var d,p=0,f=t;p<R;++p)switch(d=N[p].call(c,e,f,n,r,o,i,a,s,l,u)){case void 0:case!1:case!0:case null:break;default:f=d}if(f!==t)return f}function l(e){return void 0!==(e=e.prefix)&&(P=null,e?"function"!=typeof e?O=1:(O=2,P=e):O=0),l}function c(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<R){var o=s(-1,n,r,r,_,I,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(T,r,n,0,0);return 0<R&&void 0!==(o=s(-2,i,r,r,_,I,i.length,0,0,0))&&(i=o),j=0,I=_=1,i}var u=/^\0+/g,d=/[\0\r\f]/g,p=/: */g,f=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,b=/::(place)/g,y=/:(read-only)/g,A=/[svh]\w+-[tblr]{2}/,x=/\(\s*(.*)\s*\)/g,C=/([\s\S]*?);/g,w=/-self|flex-/g,k=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,E=/([^-])(image-set\()/,I=1,_=1,j=0,O=1,T=[],N=[],R=0,P=null,D=0;return c.use=function e(t){switch(t){case void 0:case null:R=N.length=0;break;default:if("function"==typeof t)N[R++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else D=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},We={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Ge=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Ke=(He={},function(e){return void 0===He[e]&&(He[e]=(t=e,Ge.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),He[e];var t}),Ze=n(679),qe=n.n(Ze);function Ye(){return(Ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Xe=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},Je=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,Ue.typeOf)(e)},Qe=Object.freeze([]),et=Object.freeze({});function tt(e){return"function"==typeof e}function nt(e){return e.displayName||e.name||"Component"}function rt(e){return e&&"string"==typeof e.styledComponentId}var ot="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",it="undefined"!=typeof window&&"HTMLElement"in window,at=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY);function st(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var lt=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&st(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),s=0,l=t.length;s<l;s++)this.tag.insertRule(a,t[s])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),ct=new Map,ut=new Map,dt=1,pt=function(e){if(ct.has(e))return ct.get(e);for(;ut.has(dt);)dt++;var t=dt++;return ct.set(e,t),ut.set(t,e),t},ft=function(e){return ut.get(e)},ht=function(e,t){t>=dt&&(dt=t+1),ct.set(e,t),ut.set(t,e)},mt="style["+ot+'][data-styled-version="5.3.3"]',gt=new RegExp("^"+ot+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),vt=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},bt=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var s=a.match(gt);if(s){var l=0|parseInt(s[1],10),c=s[2];0!==l&&(ht(c,l),vt(e,c,s[3]),e.getTag().insertRules(l,r)),r.length=0}else r.push(a)}}},yt=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},At=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(ot))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(ot,"active"),r.setAttribute("data-styled-version","5.3.3");var a=yt();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},xt=function(){function e(e){var t=this.element=At(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}st(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),Ct=function(){function e(e){var t=this.element=At(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),wt=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),kt=it,St={isServer:!it,useCSSOMInjection:!at},Et=function(){function e(e,t,n){void 0===e&&(e=et),void 0===t&&(t={}),this.options=Ye({},St,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&it&&kt&&(kt=!1,function(e){for(var t=document.querySelectorAll(mt),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(ot)&&(bt(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return pt(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Ye({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new wt(o):r?new xt(o):new Ct(o),new lt(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(pt(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(pt(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(pt(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=ft(o);if(void 0!==i){var a=e.names.get(i),s=t.getGroup(o);if(a&&s&&a.size){var l=ot+".g"+o+'[id="'+i+'"]',c="";void 0!==a&&a.forEach((function(e){e.length>0&&(c+=e+",")})),r+=""+s+l+'{content:"'+c+'"}/*!sc*/\n'}}}return r}(this)},e}(),It=/(a)(d)/gi,_t=function(e){return String.fromCharCode(e+(e>25?39:97))};function jt(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=_t(t%52)+n;return(_t(t%52)+n).replace(It,"$1-$2")}var Ot=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Tt=function(e){return Ot(5381,e)};function Nt(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(tt(n)&&!rt(n))return!1}return!0}var Rt=Tt("5.3.3"),Pt=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Nt(e),this.componentId=t,this.baseHash=Ot(Rt,t),this.baseStyle=n,Et.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Xt(this.rules,e,t,n).join(""),a=jt(Ot(this.baseHash,i)>>>0);if(!t.hasNameForId(r,a)){var s=n(i,"."+a,void 0,r);t.insertRules(r,a,s)}o.push(a),this.staticRulesId=a}else{for(var l=this.rules.length,c=Ot(this.baseHash,n.hash),u="",d=0;d<l;d++){var p=this.rules[d];if("string"==typeof p)u+=p;else if(p){var f=Xt(p,e,t,n),h=Array.isArray(f)?f.join(""):f;c=Ot(c,h+d),u+=h}}if(u){var m=jt(c>>>0);if(!t.hasNameForId(r,m)){var g=n(u,"."+m,void 0,r);t.insertRules(r,m,g)}o.push(m)}}return o.join(" ")},e}(),Dt=/^\s*\/\/.*$/gm,Mt=[":","[",".","#"];function Lt(e){var t,n,r,o,i=void 0===e?et:e,a=i.options,s=void 0===a?et:a,l=i.plugins,c=void 0===l?Qe:l,u=new Ve(s),d=[],p=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,s,l,c,u,d){switch(n){case 1:if(0===u&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,i){return 0===r&&-1!==Mt.indexOf(i[n.length])||i.match(o)?e:"."+t};function h(e,i,a,s){void 0===s&&(s="&");var l=e.replace(Dt,""),c=i&&a?a+" "+i+" { "+l+" }":l;return t=s,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),u(a||!i?"":i,c)}return u.use([].concat(c,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},p,function(e){if(-2===e){var t=d;return d=[],t}}])),h.hash=c.length?c.reduce((function(e,t){return t.name||st(15),Ot(e,t.name)}),5381).toString():"",h}var Bt=d().createContext(),Ht=(Bt.Consumer,d().createContext()),Ft=(Ht.Consumer,new Et),Ut=Lt();function zt(){return(0,u.useContext)(Bt)||Ft}function $t(e){var t=(0,u.useState)(e.stylisPlugins),n=t[0],r=t[1],o=zt(),i=(0,u.useMemo)((function(){var t=o;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),a=(0,u.useMemo)((function(){return Lt({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,u.useEffect)((function(){$e()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),d().createElement(Bt.Provider,{value:i},d().createElement(Ht.Provider,{value:a},e.children))}var Vt=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ut);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return st(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Ut),this.name+e.hash},e}(),Wt=/([A-Z])/,Gt=/([A-Z])/g,Kt=/^ms-/,Zt=function(e){return"-"+e.toLowerCase()};function qt(e){return Wt.test(e)?e.replace(Gt,Zt).replace(Kt,"-ms-"):e}var Yt=function(e){return null==e||!1===e||""===e};function Xt(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],a=0,s=e.length;a<s;a+=1)""!==(o=Xt(e[a],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return Yt(e)?"":rt(e)?"."+e.styledComponentId:tt(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:Xt(e(t),t,n,r):e instanceof Vt?n?(e.inject(n,r),e.getName(r)):e:Je(e)?function e(t,n){var r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&!Yt(t[a])&&(Array.isArray(t[a])&&t[a].isCss||tt(t[a])?i.push(qt(a)+":",t[a],";"):Je(t[a])?i.push.apply(i,e(t[a],a)):i.push(qt(a)+": "+(r=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in We?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var l}var Jt=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Qt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return tt(e)||Je(e)?Jt(Xt(Xe(Qe,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Jt(Xt(Xe(e,n)))}new Set;var en=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,tn=/(^-|-$)/g;function nn(e){return e.replace(en,"-").replace(tn,"")}function rn(e){return"string"==typeof e&&!0}var on=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},an=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function sn(e,t,n){var r=e[n];on(t)&&on(r)?ln(r,t):e[n]=t}function ln(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(on(a))for(var s in a)an(s)&&sn(e,a[s],s)}return e}var cn=d().createContext();cn.Consumer;var un={};function dn(e,t,n){var r=rt(e),o=!rn(e),i=t.attrs,a=void 0===i?Qe:i,s=t.componentId,l=void 0===s?function(e,t){var n="string"!=typeof e?"sc":nn(e);un[n]=(un[n]||0)+1;var r=n+"-"+function(e){return jt(Tt(e)>>>0)}("5.3.3"+n+un[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):s,c=t.displayName,p=void 0===c?function(e){return rn(e)?"styled."+e:"Styled("+nt(e)+")"}(e):c,f=t.displayName&&t.componentId?nn(t.displayName)+"-"+t.componentId:t.componentId||l,h=r&&e.attrs?Array.prototype.concat(e.attrs,a).filter(Boolean):a,m=t.shouldForwardProp;r&&e.shouldForwardProp&&(m=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var g,v=new Pt(n,f,r?e.componentStyle:void 0),b=v.isStatic&&0===a.length,y=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,s=e.foldedComponentIds,l=e.shouldForwardProp,c=e.styledComponentId,d=e.target,p=function(e,t,n){void 0===e&&(e=et);var r=Ye({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in tt(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(function(e,t,n){return void 0===n&&(n=et),e.theme!==n.theme&&e.theme||t||n.theme}(t,(0,u.useContext)(cn),a)||et,t,o),f=p[0],h=p[1],m=function(e,t,n,r){var o=zt(),i=(0,u.useContext)(Ht)||Ut;return t?e.generateAndInjectStyles(et,o,i):e.generateAndInjectStyles(n,o,i)}(i,r,f),g=n,v=h.$as||t.$as||h.as||t.as||d,b=rn(v),y=h!==t?Ye({},t,{},h):t,A={};for(var x in y)"$"!==x[0]&&"as"!==x&&("forwardedAs"===x?A.as=y[x]:(l?l(x,Ke,v):!b||Ke(x))&&(A[x]=y[x]));return t.style&&h.style!==t.style&&(A.style=Ye({},t.style,{},h.style)),A.className=Array.prototype.concat(s,c,m!==c?m:null,t.className,h.className).filter(Boolean).join(" "),A.ref=g,(0,u.createElement)(v,A)}(g,e,t,b)};return y.displayName=p,(g=d().forwardRef(y)).attrs=h,g.componentStyle=v,g.displayName=p,g.shouldForwardProp=m,g.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):Qe,g.styledComponentId=f,g.target=r?e.target:e,g.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),i=r&&r+"-"+(rn(e)?e:nn(nt(e)));return dn(e,Ye({},o,{attrs:h,componentId:i}),n)},Object.defineProperty(g,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?ln({},e.defaultProps,t):t}}),g.toString=function(){return"."+g.styledComponentId},o&&qe()(g,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),g}var pn=function(e){return function e(t,n,r){if(void 0===r&&(r=et),!(0,Ue.isValidElementType)(n))return st(1,String(n));var o=function(){return t(n,r,Qt.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Ye({},r,{},o))},o.attrs=function(o){return e(t,n,Ye({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(dn,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){pn[e]=pn(e)})),function(){var e=function(e,t){this.rules=e,this.componentId=t,this.isStatic=Nt(e),Et.registerId(this.componentId+1)}.prototype;e.createStyles=function(e,t,n,r){var o=r(Xt(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},e.removeStyles=function(e,t){t.clearRules(this.componentId+e)},e.renderStyles=function(e,t,n,r){e>2&&Et.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)}}(),function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=yt();return"<style "+[n&&'nonce="'+n+'"',ot+'="true"','data-styled-version="5.3.3"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?st(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return st(2);var n=((t={})[ot]="",t["data-styled-version"]="5.3.3",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=yt();return r&&(n.nonce=r),[d().createElement("style",Ye({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Et({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?st(2):d().createElement($t,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return st(3)}}();var fn,hn,mn,gn,vn=pn,bn=function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e},yn=function(){return yn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},yn.apply(this,arguments)},An=vn.div(fn||(fn=bn(["\n  display: block;\n  position: relative;\n"],["\n  display: block;\n  position: relative;\n"]))),xn=vn.div(hn||(hn=bn(["\n  background: #fafafa;\n  border: 1px solid #ececec;\n  border-radius: 3px;\n  padding: 1em;\n  width: 100%;\n"],["\n  background: #fafafa;\n  border: 1px solid #ececec;\n  border-radius: 3px;\n  padding: 1em;\n  width: 100%;\n"]))),Cn=vn.p(mn||(mn=bn(["\n  font-weight: 800;\n"],["\n  font-weight: 800;\n"]))),wn=vn.span(gn||(gn=bn(["\n  color: #999;\n  text-style: italic;\n"],["\n  color: #999;\n  text-style: italic;\n"])));function kn(e){var n=e.allowedTypes,r=void 0===n?[]:n,i=e.className,a=void 0===i?"":i,s=e.icon,l=void 0===s?"format-aside":s,c=e.imageSize,u=void 0===c?"thumbnail":c,d=e.label,p=void 0===d?"":d,f=e.onReset,h=e.onUpdate,m=e.onUpdateURL,g=void 0===m?null:m,v=e.preview,b=void 0===v?null:v,y=e.value,A=e.valueURL,x=void 0===A?"":A,C=(0,o.useSelect)((function(e){return y?e("core").getMedia(y)||null:{}}),[y]);if(0!==y&&null===C)return(0,t.jsx)(re.Spinner,{},void 0);var w=C?function(e,t){void 0===t&&(t="full");var n=e,r=n.media_details,o=(void 0===r?{}:r).sizes,i=void 0===o?{}:o,a=i[t],s=(void 0===a?{}:a).source_url,l=void 0===s?"":s,c=i.full,u=(void 0===c?{}:c).source_url,d=void 0===u?"":u,p=n.sizes,f=void 0===p?{}:p,h=f[t],m=(void 0===h?{}:h).url,g=void 0===m?"":m,v=f.full,b=(void 0===v?{}:v).url,y=void 0===b?"":b,A=n.source_url,x=void 0===A?"":A,C=n.url;return g||l||y||d||(void 0===C?"":C)||x||""}(C,u):x,k=C.fm_media_preview,S=C.link,E=void 0===S?"":S,I=C.mime_type,_=void 0===I?"":I,j=C.title,O=(void 0===j?{}:j).rendered,T=void 0===O?"":O;return w?(0,t.jsxs)(An,yn({className:a},{children:[b?(0,t.jsx)(b,{src:w},void 0):(0,t.jsxs)(xn,yn({className:"fm-gutenberg-media-picker__preview"},{children:[p?(0,t.jsx)(Cn,{children:p},void 0):null,(0,t.jsx)("p",{children:(0,je.__)("Selected file:","fm-gutenberg")},void 0),(0,t.jsx)(ne,{html:k,tag:"div"},void 0),(0,t.jsx)("p",{children:(0,t.jsx)("a",yn({href:E},{children:T}),void 0)},void 0),(0,t.jsx)(wn,{children:_},void 0)]}),void 0),(0,t.jsx)(re.Button,yn({isLarge:!0,isPrimary:!0,onClick:f},{children:(0,je.__)("Replace","fm-gutenberg")}),void 0)]}),void 0):(0,t.jsx)(An,yn({className:a},{children:(0,t.jsx)(Fe.MediaPlaceholder,{allowedTypes:r,disableMediaButtons:!!x,icon:(0,t.jsx)(Fe.BlockIcon,{icon:l},void 0),labels:{title:p},onSelect:h,onSelectURL:g,value:{id:y,src:w}},void 0)}),void 0)}var Sn=function(){return Sn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Sn.apply(this,arguments)};function En(e){var n=e.field.name,r=e.valueHook,o=e.index,i=void 0===o?null:o,a=e.label,s=void 0===a?"":a,l=r(null!==i?i:n),c=l[0],u=l[1],d="object"==typeof c&&null!==c?c[n]:c;d||(d=0);var p=function(e){var t,r=e.id,o="object"==typeof c&&null!==c?((t={})[n]=r,t):r;u(o)};return(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)("div",Sn({style:{flexDirection:"column"}},{children:(0,t.jsx)(kn,{onUpdate:p,onReset:function(){p({id:null})},value:d,label:s},void 0)}),void 0)},void 0)}function In(e){var n=e.field,r=n.data,o=n.datasource,i=void 0===o?{}:o,a=n.name,s=e.valueHook,l=e.index,c=void 0===l?null:l,u=e.label,d=void 0===u?"":u,p=s(null!==c?c:a),f=p[0],h=p[1],m=null===f||"object"!=typeof f||Array.isArray(f)?f:f[a],g={};null!==i&&(g=i.options);var v=pe(r);return 0===v.length&&Object.entries(g).length>0&&(v=Object.entries(g).map((function(e){var t;return{label:null!==(t=e[1].toString())&&void 0!==t?t:e[0].toString(),value:e[0]}}))),(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)(re.RadioControl,{label:d,onChange:function(e){var t,n=Number.isNaN(parseInt(e,10))?e:parseInt(e,10);h("object"==typeof f?((t={})[a]=n,t):n)},selected:null==m?void 0:m.toString(),options:v},void 0)},void 0)}function _n(e){var n=e.field,r=n.attributes.multiple,o=void 0===r?"":r,i=n.data,a=n.datasource,s=void 0===a?{}:a,l=n.first_empty,c=n.name,u=e.valueHook,d=e.index,p=void 0===d?null:d,f=e.label,h=void 0===f?"":f,m=u(null!==p?p:c),g=m[0],v=m[1],b=null!==g&&"object"==typeof g?g[c]:g,y={};null!==s&&(y=s.options);var A=pe(i);return 0===A.length&&Object.entries(y).length>0&&(A=Object.entries(y).map((function(e){var t;return{label:null!==(t=e[1].toString())&&void 0!==t?t:e[0].toString(),value:e[0]}}))),(l||null!==p)&&(A=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}([{label:"",value:""}],A,!0)),(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)(re.SelectControl,{multiple:""!==o,label:h,onChange:function(e){var t,n=Number.isNaN(parseInt(e,10))?e:parseInt(e,10);v("object"==typeof g?((t={})[c]=n,t):n)},value:b,options:A},void 0)},void 0)}var jn=n(476),On=n.n(jn),Tn=n(392),Nn={};Nn.styleTagTransform=ke(),Nn.setAttributes=Ae(),Nn.insert=be().bind(null,"head"),Nn.domAPI=ge(),Nn.insertStyleElement=Ce(),he()(Tn.Z,Nn),Tn.Z&&Tn.Z.locals&&Tn.Z.locals;var Rn=function(){return Rn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Rn.apply(this,arguments)};function Pn(e){var n=e.field,r=n.attributes,o=void 0===r?{}:r,i=n.description,a=void 0===i?"":i,s=n.description_after_element,l=void 0===s||s,c=n.name,d=e.valueHook,p=e.index,f=void 0===p?null:p,h=e.label,m=void 0===h?"":h,g=e.type,v=void 0===g?"text":g,b=d(null!==f?f:c),y=b[0],A=b[1],x=y&&"object"==typeof y&&!Array.isArray(y)?y[c]:y;x=x?String(x):"";var C=o.style?On()(o.style):{};return(0,t.jsx)(re.PanelRow,Rn({className:"fm-gutenberg-field__".concat(v)},{children:(0,t.jsxs)("div",Rn({className:"fm-gutenberg-flex__column"},{children:[a&&!l?(0,t.jsx)("div",Rn({className:"fm-gutenberg-item__description"},{children:a}),void 0):null,(0,u.createElement)(re.TextControl,Rn({},o,{label:m,onChange:function(e){A(e)},value:x,key:"text-control-".concat(c,"-").concat(f),style:C,type:v})),a&&l?(0,t.jsx)("div",Rn({className:"fm-gutenberg-item__description"},{children:a}),void 0):null]}),void 0)}),void 0)}function Dn(e){var n=e.field,r=n.name,o=n.attributes.rows,i=void 0===o?5:o,a=e.valueHook,s=e.index,l=void 0===s?null:s,c=e.label,d=void 0===c?"":c,p=a(null!==l?l:r),f=p[0],h=p[1],m="object"!=typeof f||Array.isArray(f)?f:f[r];m=m?String(m):"";var g=(0,u.useState)(m),v=g[0],b=g[1];return(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)(re.TextareaControl,{label:d,onChange:b,onBlur:function(){var e,t="object"==typeof f?((e={})[r]=v,e):v;h(t)},value:v,rows:i},void 0)},void 0)}var Mn,Ln,Bn=function(){return Bn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Bn.apply(this,arguments)},Hn={onActivate:J.func,onAddUndo:J.func,onBeforeAddUndo:J.func,onBeforeExecCommand:J.func,onBeforeGetContent:J.func,onBeforeRenderUI:J.func,onBeforeSetContent:J.func,onBeforePaste:J.func,onBlur:J.func,onChange:J.func,onClearUndos:J.func,onClick:J.func,onContextMenu:J.func,onCopy:J.func,onCut:J.func,onDblclick:J.func,onDeactivate:J.func,onDirty:J.func,onDrag:J.func,onDragDrop:J.func,onDragEnd:J.func,onDragGesture:J.func,onDragOver:J.func,onDrop:J.func,onExecCommand:J.func,onFocus:J.func,onFocusIn:J.func,onFocusOut:J.func,onGetContent:J.func,onHide:J.func,onInit:J.func,onKeyDown:J.func,onKeyPress:J.func,onKeyUp:J.func,onLoadContent:J.func,onMouseDown:J.func,onMouseEnter:J.func,onMouseLeave:J.func,onMouseMove:J.func,onMouseOut:J.func,onMouseOver:J.func,onMouseUp:J.func,onNodeChange:J.func,onObjectResizeStart:J.func,onObjectResized:J.func,onObjectSelected:J.func,onPaste:J.func,onPostProcess:J.func,onPostRender:J.func,onPreProcess:J.func,onProgressState:J.func,onRedo:J.func,onRemove:J.func,onReset:J.func,onSaveContent:J.func,onSelectionChange:J.func,onSetAttrib:J.func,onSetContent:J.func,onShow:J.func,onSubmit:J.func,onUndo:J.func,onVisualAid:J.func,onSkinLoadError:J.func,onThemeLoadError:J.func,onModelLoadError:J.func,onPluginLoadError:J.func,onIconsLoadError:J.func,onLanguageLoadError:J.func},Fn=Bn({apiKey:J.string,id:J.string,inline:J.bool,init:J.object,initialValue:J.string,onEditorChange:J.func,value:J.string,tagName:J.string,cloudChannel:J.string,plugins:J.oneOfType([J.string,J.array]),toolbar:J.oneOfType([J.string,J.array]),disabled:J.bool,textareaName:J.string,tinymceScriptSrc:J.string,rollback:J.oneOfType([J.number,J.oneOf([!1])]),scriptLoading:J.shape({async:J.bool,defer:J.bool,delay:J.number})},Hn),Un=function(e){return"function"==typeof e},zn=function(e){return e in Hn},$n=function(e){return e.substr(2)},Vn=function(e,t,n,r,o){return function(t,n,r,o,i,a,s){var l=Object.keys(i).filter(zn),c=Object.keys(a).filter(zn),u=l.filter((function(e){return void 0===a[e]})),d=c.filter((function(e){return void 0===i[e]}));u.forEach((function(e){var t=$n(e),n=s[t];r(t,n),delete s[t]})),d.forEach((function(r){var o=function(t,n){return function(r){var o;return null===(o=t(n))||void 0===o?void 0:o(r,e)}}(t,r),i=$n(r);s[i]=o,n(i,o)}))}(o,e.on.bind(e),e.off.bind(e),0,t,n,r)},Wn=0,Gn=function(e){var t=Date.now();return e+"_"+Math.floor(1e9*Math.random())+ ++Wn+String(t)},Kn=function(e){return null!==e&&("textarea"===e.tagName.toLowerCase()||"input"===e.tagName.toLowerCase())},Zn=function(e){return void 0===e||""===e?[]:Array.isArray(e)?e:e.split(" ")},qn=function(e,t){void 0!==e&&(null!=e.mode&&"object"==typeof e.mode&&"function"==typeof e.mode.set?e.mode.set(t):e.setMode(t))},Yn=function(){return{listeners:[],scriptId:Gn("tiny-script"),scriptLoading:!1,scriptLoaded:!1}},Xn=(Mn=Yn(),{load:function(e,t,n,r,o,i){var a=function(){return function(e,t,n,r,o,i){var a=t.createElement("script");a.referrerPolicy="origin",a.type="application/javascript",a.id=e,a.src=n,a.async=r,a.defer=o;var s=function(){a.removeEventListener("load",s),Mn.listeners.forEach((function(e){return e()})),Mn.scriptLoaded=!0};a.addEventListener("load",s),t.head&&t.head.appendChild(a)}(Mn.scriptId,e,t,n,r)};Mn.scriptLoaded?i():(Mn.listeners.push(i),Mn.scriptLoading||(Mn.scriptLoading=!0,o>0?setTimeout(a,o):a()))},reinitialize:function(){Mn=Yn()}}),Jn=function(){var e="undefined"!=typeof window?window:n.g;return e&&e.tinymce?e.tinymce:null},Qn=(Ln=function(e,t){return Ln=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Ln(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Ln(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),er=function(){return er=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},er.apply(this,arguments)},tr=function(){var e,t,n;return(null===(n=null===(t=null===(e=Jn())||void 0===e?void 0:e.Env)||void 0===t?void 0:t.browser)||void 0===n?void 0:n.isIE())?"change keyup compositionend setcontent":"change input compositionend setcontent"},nr=function(){return window.InputEvent&&"function"==typeof InputEvent.prototype.getTargetRanges?"beforeinput SelectionChange":"SelectionChange"},rr=function(e){function t(t){var n,r,o,i=this;return(i=e.call(this,t)||this).rollbackTimer=void 0,i.valueCursor=void 0,i.rollbackChange=function(){var e=i.editor,t=i.props.value;e&&t&&t!==i.currentContent&&e.undoManager.ignore((function(){if(e.setContent(t),i.valueCursor&&(!i.inline||e.hasFocus()))try{e.selection.moveToBookmark(i.valueCursor)}catch(e){}})),i.rollbackTimer=void 0},i.handleBeforeInput=function(e){if(void 0!==i.props.value&&i.props.value===i.currentContent&&i.editor&&(!i.inline||i.editor.hasFocus))try{i.valueCursor=i.editor.selection.getBookmark(3)}catch(e){}},i.handleBeforeInputSpecial=function(e){"Enter"!==e.key&&"Backspace"!==e.key&&"Delete"!==e.key||i.handleBeforeInput(e)},i.handleEditorChange=function(e){var t=i.editor;if(t&&t.initialized){var n=t.getContent();void 0!==i.props.value&&i.props.value!==n&&!1!==i.props.rollback&&(i.rollbackTimer||(i.rollbackTimer=window.setTimeout(i.rollbackChange,"number"==typeof i.props.rollback?i.props.rollback:200))),n!==i.currentContent&&(i.currentContent=n,Un(i.props.onEditorChange)&&i.props.onEditorChange(n,t))}},i.handleEditorChangeSpecial=function(e){"Backspace"!==e.key&&"Delete"!==e.key||i.handleEditorChange(e)},i.initialise=function(e){var t,n,r;void 0===e&&(e=0);var o=i.elementRef.current;if(o)if(function(e){if(!("isConnected"in Node.prototype)){for(var t=e,n=e.parentNode;null!=n;)n=(t=n).parentNode;return t===e.ownerDocument}return e.isConnected}(o)){var a=Jn();if(!a)throw new Error("tinymce should have been loaded into global scope");var s,l,c=er(er({},i.props.init),{selector:void 0,target:o,readonly:i.props.disabled,inline:i.inline,plugins:(s=null===(t=i.props.init)||void 0===t?void 0:t.plugins,l=i.props.plugins,Zn(s).concat(Zn(l))),toolbar:null!==(n=i.props.toolbar)&&void 0!==n?n:null===(r=i.props.init)||void 0===r?void 0:r.toolbar,setup:function(e){i.editor=e,i.bindHandlers({}),i.inline&&!Kn(o)&&e.once("PostRender",(function(t){e.setContent(i.getInitialValue(),{no_events:!0})})),i.props.init&&Un(i.props.init.setup)&&i.props.init.setup(e)},init_instance_callback:function(e){var t,n,r=i.getInitialValue();i.currentContent=null!==(t=i.currentContent)&&void 0!==t?t:e.getContent(),i.currentContent!==r&&(i.currentContent=r,e.setContent(r),e.undoManager.clear(),e.undoManager.add(),e.setDirty(!1));var o=null!==(n=i.props.disabled)&&void 0!==n&&n;qn(i.editor,o?"readonly":"design"),i.props.init&&Un(i.props.init.init_instance_callback)&&i.props.init.init_instance_callback(e)}});i.inline||(o.style.visibility=""),Kn(o)&&(o.value=i.getInitialValue()),a.init(c)}else if(0===e)setTimeout((function(){return i.initialise(1)}),1);else{if(!(e<100))throw new Error("tinymce can only be initialised when in a document");setTimeout((function(){return i.initialise(e+1)}),100)}},i.id=i.props.id||Gn("tiny-react"),i.elementRef=u.createRef(),i.inline=null!==(o=null!==(n=i.props.inline)&&void 0!==n?n:null===(r=i.props.init)||void 0===r?void 0:r.inline)&&void 0!==o&&o,i.boundHandlers={},i}return Qn(t,e),t.prototype.componentDidUpdate=function(e){var t,n,r=this;if(this.rollbackTimer&&(clearTimeout(this.rollbackTimer),this.rollbackTimer=void 0),this.editor&&(this.bindHandlers(e),this.editor.initialized)){if(this.currentContent=null!==(t=this.currentContent)&&void 0!==t?t:this.editor.getContent(),"string"==typeof this.props.initialValue&&this.props.initialValue!==e.initialValue)this.editor.setContent(this.props.initialValue),this.editor.undoManager.clear(),this.editor.undoManager.add(),this.editor.setDirty(!1);else if("string"==typeof this.props.value&&this.props.value!==this.currentContent){var o=this.editor;o.undoManager.transact((function(){var e;if(!r.inline||o.hasFocus())try{e=o.selection.getBookmark(3)}catch(e){}var t=r.valueCursor;if(o.setContent(r.props.value),!r.inline||o.hasFocus())for(var n=0,i=[e,t];n<i.length;n++){var a=i[n];if(a)try{o.selection.moveToBookmark(a),r.valueCursor=a;break}catch(e){}}}))}if(this.props.disabled!==e.disabled){var i=null!==(n=this.props.disabled)&&void 0!==n&&n;qn(this.editor,i?"readonly":"design")}}},t.prototype.componentDidMount=function(){var e,t,n,r,o,i;null!==Jn()?this.initialise():this.elementRef.current&&this.elementRef.current.ownerDocument&&Xn.load(this.elementRef.current.ownerDocument,this.getScriptSrc(),null!==(t=null===(e=this.props.scriptLoading)||void 0===e?void 0:e.async)&&void 0!==t&&t,null!==(r=null===(n=this.props.scriptLoading)||void 0===n?void 0:n.defer)&&void 0!==r&&r,null!==(i=null===(o=this.props.scriptLoading)||void 0===o?void 0:o.delay)&&void 0!==i?i:0,this.initialise)},t.prototype.componentWillUnmount=function(){var e=this,t=this.editor;t&&(t.off(tr(),this.handleEditorChange),t.off(nr(),this.handleBeforeInput),t.off("keypress",this.handleEditorChangeSpecial),t.off("keydown",this.handleBeforeInputSpecial),t.off("NewBlock",this.handleEditorChange),Object.keys(this.boundHandlers).forEach((function(n){t.off(n,e.boundHandlers[n])})),this.boundHandlers={},t.remove(),this.editor=void 0)},t.prototype.render=function(){return this.inline?this.renderInline():this.renderIframe()},t.prototype.renderInline=function(){var e=this.props.tagName,t=void 0===e?"div":e;return u.createElement(t,{ref:this.elementRef,id:this.id})},t.prototype.renderIframe=function(){return u.createElement("textarea",{ref:this.elementRef,style:{visibility:"hidden"},name:this.props.textareaName,id:this.id})},t.prototype.getScriptSrc=function(){if("string"==typeof this.props.tinymceScriptSrc)return this.props.tinymceScriptSrc;var e=this.props.cloudChannel,t=this.props.apiKey?this.props.apiKey:"no-api-key";return"https://cdn.tiny.cloud/1/".concat(t,"/tinymce/").concat(e,"/tinymce.min.js")},t.prototype.getInitialValue=function(){return"string"==typeof this.props.initialValue?this.props.initialValue:"string"==typeof this.props.value?this.props.value:""},t.prototype.bindHandlers=function(e){var t=this;if(void 0!==this.editor){Vn(this.editor,e,this.props,this.boundHandlers,(function(e){return t.props[e]}));var n=function(e){return void 0!==e.onEditorChange||void 0!==e.value},r=n(e),o=n(this.props);!r&&o?(this.editor.on(tr(),this.handleEditorChange),this.editor.on(nr(),this.handleBeforeInput),this.editor.on("keydown",this.handleBeforeInputSpecial),this.editor.on("keyup",this.handleEditorChangeSpecial),this.editor.on("NewBlock",this.handleEditorChange)):r&&!o&&(this.editor.off(tr(),this.handleEditorChange),this.editor.off(nr(),this.handleBeforeInput),this.editor.off("keydown",this.handleBeforeInputSpecial),this.editor.off("keyup",this.handleEditorChangeSpecial),this.editor.off("NewBlock",this.handleEditorChange))}},t.propTypes=Fn,t.defaultProps={cloudChannel:"6"},t}(u.Component),or=function(){return or=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},or.apply(this,arguments)};function ir(e){var n=e.field.name,r=e.valueHook,o=e.index,i=void 0===o?null:o,a=e.label,s=void 0===a?"":a,l=r(null!==i?i:n),c=l[0],d=l[1],p="object"!=typeof c||Array.isArray(c)?c:c[n];p=p?String(p):"";var f=(0,u.useState)(p),h=f[0],m=f[1],g=de();return(0,t.jsx)(re.PanelRow,{children:(0,t.jsxs)("div",or({className:"fm-gutenberg-panel-container"},{children:[(0,t.jsx)("label",or({htmlFor:g},{children:s}),void 0),(0,t.jsx)(rr,{value:h,tinymceScriptSrc:"".concat(tinyMCEPreInit.baseURL,"/tinymce.min.js"),init:{height:200,menubar:!1,plugins:["lists link image fullscreen media paste"],toolbar:"formatselect bold italic bullist numlist blockquote alignleft aligncenter alignright link fullscreen",content_style:"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }"},onEditorChange:m,onBlur:function(){var e,t="object"==typeof c?((e={})[n]=h,e):h;d(t)},id:g},void 0)]}),void 0)},void 0)}function ar(e){return"object"==typeof e&&null!=e&&1===e.nodeType}function sr(e,t){return(!t||"hidden"!==e)&&"visible"!==e&&"clip"!==e}function lr(e,t){if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){var n=getComputedStyle(e,null);return sr(n.overflowY,t)||sr(n.overflowX,t)||function(e){var t=function(e){if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(e){return null}}(e);return!!t&&(t.clientHeight<e.scrollHeight||t.clientWidth<e.scrollWidth)}(e)}return!1}function cr(e,t,n,r,o,i,a,s){return i<e&&a>t||i>e&&a<t?0:i<=e&&s<=n||a>=t&&s>=n?i-e-r:a>t&&s<n||i<e&&s>n?a-t+o:0}var ur=function(){return ur=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ur.apply(this,arguments)};Object.create,Object.create;let dr=0;function pr(e){return"function"==typeof e?e:fr}function fr(){}function hr(e,t){if(!e)return;const n=function(e,t){var n=window,r=t.scrollMode,o=t.block,i=t.inline,a=t.boundary,s=t.skipOverflowHiddenElements,l="function"==typeof a?a:function(e){return e!==a};if(!ar(e))throw new TypeError("Invalid target");for(var c=document.scrollingElement||document.documentElement,u=[],d=e;ar(d)&&l(d);){if((d=d.parentElement)===c){u.push(d);break}null!=d&&d===document.body&&lr(d)&&!lr(document.documentElement)||null!=d&&lr(d,s)&&u.push(d)}for(var p=n.visualViewport?n.visualViewport.width:innerWidth,f=n.visualViewport?n.visualViewport.height:innerHeight,h=window.scrollX||pageXOffset,m=window.scrollY||pageYOffset,g=e.getBoundingClientRect(),v=g.height,b=g.width,y=g.top,A=g.right,x=g.bottom,C=g.left,w="start"===o||"nearest"===o?y:"end"===o?x:y+v/2,k="center"===i?C+b/2:"end"===i?A:C,S=[],E=0;E<u.length;E++){var I=u[E],_=I.getBoundingClientRect(),j=_.height,O=_.width,T=_.top,N=_.right,R=_.bottom,P=_.left;if("if-needed"===r&&y>=0&&C>=0&&x<=f&&A<=p&&y>=T&&x<=R&&C>=P&&A<=N)return S;var D=getComputedStyle(I),M=parseInt(D.borderLeftWidth,10),L=parseInt(D.borderTopWidth,10),B=parseInt(D.borderRightWidth,10),H=parseInt(D.borderBottomWidth,10),F=0,U=0,z="offsetWidth"in I?I.offsetWidth-I.clientWidth-M-B:0,$="offsetHeight"in I?I.offsetHeight-I.clientHeight-L-H:0;if(c===I)F="start"===o?w:"end"===o?w-f:"nearest"===o?cr(m,m+f,f,L,H,m+w,m+w+v,v):w-f/2,U="start"===i?k:"center"===i?k-p/2:"end"===i?k-p:cr(h,h+p,p,M,B,h+k,h+k+b,b),F=Math.max(0,F+m),U=Math.max(0,U+h);else{F="start"===o?w-T-L:"end"===o?w-R+H+$:"nearest"===o?cr(T,R,j,L,H+$,w,w+v,v):w-(T+j/2)+$/2,U="start"===i?k-P-M:"center"===i?k-(P+O/2)+z/2:"end"===i?k-N+B+z:cr(P,N,O,M,B+z,k,k+b,b);var V=I.scrollLeft,W=I.scrollTop;w+=W-(F=Math.max(0,Math.min(W+F,I.scrollHeight-j+$))),k+=V-(U=Math.max(0,Math.min(V+U,I.scrollWidth-O+z)))}S.push({el:I,top:F,left:U})}return S}(e,{boundary:t,block:"nearest",scrollMode:"if-needed"});n.forEach((e=>{let{el:t,top:n,left:r}=e;t.scrollTop=n,t.scrollLeft=r}))}function mr(e,t,n){return e===t||t instanceof n.Node&&e.contains&&e.contains(t)}function gr(e,t){let n;function r(){n&&clearTimeout(n)}function o(){for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];r(),n=setTimeout((()=>{n=null,e(...i)}),t)}return o.cancel=r,o}function vr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return t.some((t=>(t&&t(e,...r),e.preventDownshiftDefault||e.hasOwnProperty("nativeEvent")&&e.nativeEvent.preventDownshiftDefault)))}}function br(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return e=>{t.forEach((t=>{"function"==typeof t?t(e):t&&(t.current=e)}))}}function yr(e){let{isOpen:t,resultCount:n,previousResultCount:r}=e;return t?n?n!==r?`${n} result${1===n?" is":"s are"} available, use up and down arrow keys to navigate. Press Enter key to select.`:"":"No results are available.":""}function Ar(e,t){return!(e=Array.isArray(e)?e[0]:e)&&t?t:e}const xr=["highlightedIndex","inputValue","isOpen","selectedItem","type"];function Cr(e){void 0===e&&(e={});const t={};return xr.forEach((n=>{e.hasOwnProperty(n)&&(t[n]=e[n])})),t}function wr(e,t){return void 0!==e[t]}function kr(e){const{key:t,keyCode:n}=e;return n>=37&&n<=40&&0!==t.indexOf("Arrow")?`Arrow${t}`:t}function Sr(e,t,n,r,o){if(void 0===o&&(o=!0),0===n)return-1;const i=n-1;("number"!=typeof t||t<0||t>=n)&&(t=e>0?-1:i+1);let a=t+e;a<0?a=o?i:0:a>i&&(a=o?0:i);const s=Er(e,a,n,r,o);return-1===s?t>=n?-1:t:s}function Er(e,t,n,r,o){const i=r(t);if(!i||!i.hasAttribute("disabled"))return t;if(e>0){for(let e=t+1;e<n;e++)if(!r(e).hasAttribute("disabled"))return e}else for(let e=t-1;e>=0;e--)if(!r(e).hasAttribute("disabled"))return e;return o?e>0?Er(1,0,n,r,!1):Er(-1,n-1,n,r,!1):-1}function Ir(e,t,n,r){return void 0===r&&(r=!0),t.some((t=>t&&(mr(t,e,n)||r&&mr(t,n.document.activeElement,n))))}const _r=gr((e=>{Or(e).textContent=""}),500);function jr(e,t){const n=Or(t);e&&(n.textContent=e,_r(t))}function Or(e){void 0===e&&(e=document);let t=e.getElementById("a11y-status-message");return t||(t=e.createElement("div"),t.setAttribute("id","a11y-status-message"),t.setAttribute("role","status"),t.setAttribute("aria-live","polite"),t.setAttribute("aria-relevant","additions text"),Object.assign(t.style,{border:"0",clip:"rect(0 0 0 0)",height:"1px",margin:"-1px",overflow:"hidden",padding:"0",position:"absolute",width:"1px"}),e.body.appendChild(t),t)}var Tr=Object.freeze({__proto__:null,unknown:0,mouseUp:1,itemMouseEnter:2,keyDownArrowUp:3,keyDownArrowDown:4,keyDownEscape:5,keyDownEnter:6,keyDownHome:7,keyDownEnd:8,clickItem:9,blurInput:10,changeInput:11,keyDownSpaceButton:12,clickButton:13,blurButton:14,controlledPropUpdatedSelectedItem:15,touchEnd:16});const Nr=(()=>{class e extends u.Component{constructor(e){var t;super(e),t=this,this.id=this.props.id||`downshift-${String(dr++)}`,this.menuId=this.props.menuId||`${this.id}-menu`,this.labelId=this.props.labelId||`${this.id}-label`,this.inputId=this.props.inputId||`${this.id}-input`,this.getItemId=this.props.getItemId||(e=>`${this.id}-item-${e}`),this.input=null,this.items=[],this.itemCount=null,this.previousResultCount=0,this.timeoutIds=[],this.internalSetTimeout=(e,t)=>{const n=setTimeout((()=>{this.timeoutIds=this.timeoutIds.filter((e=>e!==n)),e()}),t);this.timeoutIds.push(n)},this.setItemCount=e=>{this.itemCount=e},this.unsetItemCount=()=>{this.itemCount=null},this.setHighlightedIndex=function(e,n){void 0===e&&(e=t.props.defaultHighlightedIndex),void 0===n&&(n={}),n=Cr(n),t.internalSetState({highlightedIndex:e,...n})},this.clearSelection=e=>{this.internalSetState({selectedItem:null,inputValue:"",highlightedIndex:this.props.defaultHighlightedIndex,isOpen:this.props.defaultIsOpen},e)},this.selectItem=(e,t,n)=>{t=Cr(t),this.internalSetState({isOpen:this.props.defaultIsOpen,highlightedIndex:this.props.defaultHighlightedIndex,selectedItem:e,inputValue:this.props.itemToString(e),...t},n)},this.selectItemAtIndex=(e,t,n)=>{const r=this.items[e];null!=r&&this.selectItem(r,t,n)},this.selectHighlightedItem=(e,t)=>this.selectItemAtIndex(this.getState().highlightedIndex,e,t),this.internalSetState=(e,t)=>{let n,r;const o={},i="function"==typeof e;return!i&&e.hasOwnProperty("inputValue")&&this.props.onInputValueChange(e.inputValue,{...this.getStateAndHelpers(),...e}),this.setState((t=>{t=this.getState(t);let a=i?e(t):e;a=this.props.stateReducer(t,a),n=a.hasOwnProperty("selectedItem");const s={};return n&&a.selectedItem!==t.selectedItem&&(r=a.selectedItem),a.type=a.type||0,Object.keys(a).forEach((e=>{t[e]!==a[e]&&(o[e]=a[e]),"type"!==e&&(a[e],wr(this.props,e)||(s[e]=a[e]))})),i&&a.hasOwnProperty("inputValue")&&this.props.onInputValueChange(a.inputValue,{...this.getStateAndHelpers(),...a}),s}),(()=>{pr(t)(),Object.keys(o).length>1&&this.props.onStateChange(o,this.getStateAndHelpers()),n&&this.props.onSelect(e.selectedItem,this.getStateAndHelpers()),void 0!==r&&this.props.onChange(r,this.getStateAndHelpers()),this.props.onUserAction(o,this.getStateAndHelpers())}))},this.rootRef=e=>this._rootNode=e,this.getRootProps=function(e,n){let{refKey:r="ref",ref:o,...i}=void 0===e?{}:e,{suppressRefError:a=!1}=void 0===n?{}:n;t.getRootProps.called=!0,t.getRootProps.refKey=r,t.getRootProps.suppressRefError=a;const{isOpen:s}=t.getState();return{[r]:br(o,t.rootRef),role:"combobox","aria-expanded":s,"aria-haspopup":"listbox","aria-owns":s?t.menuId:null,"aria-labelledby":t.labelId,...i}},this.keyDownHandlers={ArrowDown(e){if(e.preventDefault(),this.getState().isOpen){const t=e.shiftKey?5:1;this.moveHighlightedIndex(t,{type:4})}else this.internalSetState({isOpen:!0,type:4},(()=>{const e=this.getItemCount();if(e>0){const{highlightedIndex:t}=this.getState(),n=Sr(1,t,e,(e=>this.getItemNodeFromIndex(e)));this.setHighlightedIndex(n,{type:4})}}))},ArrowUp(e){if(e.preventDefault(),this.getState().isOpen){const t=e.shiftKey?-5:-1;this.moveHighlightedIndex(t,{type:3})}else this.internalSetState({isOpen:!0,type:3},(()=>{const e=this.getItemCount();if(e>0){const{highlightedIndex:t}=this.getState(),n=Sr(-1,t,e,(e=>this.getItemNodeFromIndex(e)));this.setHighlightedIndex(n,{type:3})}}))},Enter(e){if(229===e.which)return;const{isOpen:t,highlightedIndex:n}=this.getState();if(t&&null!=n){e.preventDefault();const t=this.items[n],r=this.getItemNodeFromIndex(n);if(null==t||r&&r.hasAttribute("disabled"))return;this.selectHighlightedItem({type:6})}},Escape(e){e.preventDefault(),this.reset({type:5,...!this.state.isOpen&&{selectedItem:null,inputValue:""}})}},this.buttonKeyDownHandlers={...this.keyDownHandlers," "(e){e.preventDefault(),this.toggleMenu({type:12})}},this.inputKeyDownHandlers={...this.keyDownHandlers,Home(e){const{isOpen:t}=this.getState();if(!t)return;e.preventDefault();const n=this.getItemCount();if(n<=0||!t)return;const r=Er(1,0,n,(e=>this.getItemNodeFromIndex(e)),!1);this.setHighlightedIndex(r,{type:7})},End(e){const{isOpen:t}=this.getState();if(!t)return;e.preventDefault();const n=this.getItemCount();if(n<=0||!t)return;const r=Er(-1,n-1,n,(e=>this.getItemNodeFromIndex(e)),!1);this.setHighlightedIndex(r,{type:8})}},this.getToggleButtonProps=function(e){let{onClick:n,onPress:r,onKeyDown:o,onKeyUp:i,onBlur:a,...s}=void 0===e?{}:e;const{isOpen:l}=t.getState(),c={onClick:vr(n,t.buttonHandleClick),onKeyDown:vr(o,t.buttonHandleKeyDown),onKeyUp:vr(i,t.buttonHandleKeyUp),onBlur:vr(a,t.buttonHandleBlur)};return{type:"button",role:"button","aria-label":l?"close menu":"open menu","aria-haspopup":!0,"data-toggle":!0,...s.disabled?{}:c,...s}},this.buttonHandleKeyUp=e=>{e.preventDefault()},this.buttonHandleKeyDown=e=>{const t=kr(e);this.buttonKeyDownHandlers[t]&&this.buttonKeyDownHandlers[t].call(this,e)},this.buttonHandleClick=e=>{e.preventDefault(),this.props.environment.document.activeElement===this.props.environment.document.body&&e.target.focus(),this.internalSetTimeout((()=>this.toggleMenu({type:13})))},this.buttonHandleBlur=e=>{const t=e.target;this.internalSetTimeout((()=>{this.isMouseDown||null!=this.props.environment.document.activeElement&&this.props.environment.document.activeElement.id===this.inputId||this.props.environment.document.activeElement===t||this.reset({type:14})}))},this.getLabelProps=e=>({htmlFor:this.inputId,id:this.labelId,...e}),this.getInputProps=function(e){let n,{onKeyDown:r,onBlur:o,onChange:i,onInput:a,onChangeText:s,...l}=void 0===e?{}:e,c={};n="onChange";const{inputValue:u,isOpen:d,highlightedIndex:p}=t.getState();return l.disabled||(c={onChange:vr(i,a,t.inputHandleChange),onKeyDown:vr(r,t.inputHandleKeyDown),onBlur:vr(o,t.inputHandleBlur)}),{"aria-autocomplete":"list","aria-activedescendant":d&&"number"==typeof p&&p>=0?t.getItemId(p):null,"aria-controls":d?t.menuId:null,"aria-labelledby":t.labelId,autoComplete:"off",value:u,id:t.inputId,...c,...l}},this.inputHandleKeyDown=e=>{const t=kr(e);t&&this.inputKeyDownHandlers[t]&&this.inputKeyDownHandlers[t].call(this,e)},this.inputHandleChange=e=>{this.internalSetState({type:11,isOpen:!0,inputValue:e.target.value,highlightedIndex:this.props.defaultHighlightedIndex})},this.inputHandleBlur=()=>{this.internalSetTimeout((()=>{const e=this.props.environment.document&&!!this.props.environment.document.activeElement&&!!this.props.environment.document.activeElement.dataset&&this.props.environment.document.activeElement.dataset.toggle&&this._rootNode&&this._rootNode.contains(this.props.environment.document.activeElement);this.isMouseDown||e||this.reset({type:10})}))},this.menuRef=e=>{this._menuNode=e},this.getMenuProps=function(e,n){let{refKey:r="ref",ref:o,...i}=void 0===e?{}:e,{suppressRefError:a=!1}=void 0===n?{}:n;return t.getMenuProps.called=!0,t.getMenuProps.refKey=r,t.getMenuProps.suppressRefError=a,{[r]:br(o,t.menuRef),role:"listbox","aria-labelledby":i&&i["aria-label"]?null:t.labelId,id:t.menuId,...i}},this.getItemProps=function(e){let{onMouseMove:n,onMouseDown:r,onClick:o,onPress:i,index:a,item:s,...l}=void 0===e?{}:e;void 0===a?(t.items.push(s),a=t.items.indexOf(s)):t.items[a]=s;const c=o,u={onMouseMove:vr(n,(()=>{a!==t.getState().highlightedIndex&&(t.setHighlightedIndex(a,{type:2}),t.avoidScrolling=!0,t.internalSetTimeout((()=>t.avoidScrolling=!1),250))})),onMouseDown:vr(r,(e=>{e.preventDefault()})),onClick:vr(c,(()=>{t.selectItemAtIndex(a,{type:9})}))},d=l.disabled?{onMouseDown:u.onMouseDown}:u;return{id:t.getItemId(a),role:"option","aria-selected":t.getState().highlightedIndex===a,...d,...l}},this.clearItems=()=>{this.items=[]},this.reset=function(e,n){void 0===e&&(e={}),e=Cr(e),t.internalSetState((n=>{let{selectedItem:r}=n;return{isOpen:t.props.defaultIsOpen,highlightedIndex:t.props.defaultHighlightedIndex,inputValue:t.props.itemToString(r),...e}}),n)},this.toggleMenu=function(e,n){void 0===e&&(e={}),e=Cr(e),t.internalSetState((n=>{let{isOpen:r}=n;return{isOpen:!r,...r&&{highlightedIndex:t.props.defaultHighlightedIndex},...e}}),(()=>{const{isOpen:r,highlightedIndex:o}=t.getState();r&&t.getItemCount()>0&&"number"==typeof o&&t.setHighlightedIndex(o,e),pr(n)()}))},this.openMenu=e=>{this.internalSetState({isOpen:!0},e)},this.closeMenu=e=>{this.internalSetState({isOpen:!1},e)},this.updateStatus=gr((()=>{const e=this.getState(),t=this.items[e.highlightedIndex],n=this.getItemCount(),r=this.props.getA11yStatusMessage({itemToString:this.props.itemToString,previousResultCount:this.previousResultCount,resultCount:n,highlightedItem:t,...e});this.previousResultCount=n,jr(r,this.props.environment.document)}),200);const{defaultHighlightedIndex:n,initialHighlightedIndex:r=n,defaultIsOpen:o,initialIsOpen:i=o,initialInputValue:a="",initialSelectedItem:s=null}=this.props,l=this.getState({highlightedIndex:r,isOpen:i,inputValue:a,selectedItem:s});null!=l.selectedItem&&void 0===this.props.initialInputValue&&(l.inputValue=this.props.itemToString(l.selectedItem)),this.state=l}internalClearTimeouts(){this.timeoutIds.forEach((e=>{clearTimeout(e)})),this.timeoutIds=[]}getState(e){return void 0===e&&(e=this.state),function(e,t){return Object.keys(e).reduce(((n,r)=>(n[r]=wr(t,r)?t[r]:e[r],n)),{})}(e,this.props)}getItemCount(){let e=this.items.length;return null!=this.itemCount?e=this.itemCount:void 0!==this.props.itemCount&&(e=this.props.itemCount),e}getItemNodeFromIndex(e){return this.props.environment.document.getElementById(this.getItemId(e))}scrollHighlightedItemIntoView(){{const e=this.getItemNodeFromIndex(this.getState().highlightedIndex);this.props.scrollIntoView(e,this._menuNode)}}moveHighlightedIndex(e,t){const n=this.getItemCount(),{highlightedIndex:r}=this.getState();if(n>0){const o=Sr(e,r,n,(e=>this.getItemNodeFromIndex(e)));this.setHighlightedIndex(o,t)}}getStateAndHelpers(){const{highlightedIndex:e,inputValue:t,selectedItem:n,isOpen:r}=this.getState(),{itemToString:o}=this.props,{id:i}=this,{getRootProps:a,getToggleButtonProps:s,getLabelProps:l,getMenuProps:c,getInputProps:u,getItemProps:d,openMenu:p,closeMenu:f,toggleMenu:h,selectItem:m,selectItemAtIndex:g,selectHighlightedItem:v,setHighlightedIndex:b,clearSelection:y,clearItems:A,reset:x,setItemCount:C,unsetItemCount:w,internalSetState:k}=this;return{getRootProps:a,getToggleButtonProps:s,getLabelProps:l,getMenuProps:c,getInputProps:u,getItemProps:d,reset:x,openMenu:p,closeMenu:f,toggleMenu:h,selectItem:m,selectItemAtIndex:g,selectHighlightedItem:v,setHighlightedIndex:b,clearSelection:y,clearItems:A,setItemCount:C,unsetItemCount:w,setState:k,itemToString:o,id:i,highlightedIndex:e,inputValue:t,isOpen:r,selectedItem:n}}componentDidMount(){{const e=()=>{this.isMouseDown=!0},t=e=>{this.isMouseDown=!1,!Ir(e.target,[this._rootNode,this._menuNode],this.props.environment)&&this.getState().isOpen&&this.reset({type:1},(()=>this.props.onOuterClick(this.getStateAndHelpers())))},n=()=>{this.isTouchMove=!1},r=()=>{this.isTouchMove=!0},o=e=>{const t=Ir(e.target,[this._rootNode,this._menuNode],this.props.environment,!1);this.isTouchMove||t||!this.getState().isOpen||this.reset({type:16},(()=>this.props.onOuterClick(this.getStateAndHelpers())))},{environment:i}=this.props;i.addEventListener("mousedown",e),i.addEventListener("mouseup",t),i.addEventListener("touchstart",n),i.addEventListener("touchmove",r),i.addEventListener("touchend",o),this.cleanup=()=>{this.internalClearTimeouts(),this.updateStatus.cancel(),i.removeEventListener("mousedown",e),i.removeEventListener("mouseup",t),i.removeEventListener("touchstart",n),i.removeEventListener("touchmove",r),i.removeEventListener("touchend",o)}}}shouldScroll(e,t){const{highlightedIndex:n}=void 0===this.props.highlightedIndex?this.getState():this.props,{highlightedIndex:r}=void 0===t.highlightedIndex?e:t;return n&&this.getState().isOpen&&!e.isOpen||n!==r}componentDidUpdate(e,t){wr(this.props,"selectedItem")&&this.props.selectedItemChanged(e.selectedItem,this.props.selectedItem)&&this.internalSetState({type:15,inputValue:this.props.itemToString(this.props.selectedItem)}),!this.avoidScrolling&&this.shouldScroll(t,e)&&this.scrollHighlightedItemIntoView(),this.updateStatus()}componentWillUnmount(){this.cleanup()}render(){const e=Ar(this.props.children,fr);this.clearItems(),this.getRootProps.called=!1,this.getRootProps.refKey=void 0,this.getRootProps.suppressRefError=void 0,this.getMenuProps.called=!1,this.getMenuProps.refKey=void 0,this.getMenuProps.suppressRefError=void 0,this.getLabelProps.called=!1,this.getInputProps.called=!1;const t=Ar(e(this.getStateAndHelpers()));return t?this.getRootProps.called||this.props.suppressRefError?t:function(e){return"string"==typeof e.type}(t)?(0,u.cloneElement)(t,this.getRootProps(function(e){return e.props}(t))):void 0:null}}return e.defaultProps={defaultHighlightedIndex:null,defaultIsOpen:!1,getA11yStatusMessage:yr,itemToString:e=>null==e?"":String(e),onStateChange:fr,onInputValueChange:fr,onUserAction:fr,onChange:fr,onSelect:fr,onOuterClick:fr,selectedItemChanged:(e,t)=>e!==t,environment:"undefined"==typeof window?{}:window,stateReducer:(e,t)=>t,suppressRefError:!1,scrollIntoView:hr},e.stateChangeTypes=Tr,e})();var Rr=Nr;gr(((e,t)=>{jr(e(),t)}),200),"undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?u.useLayoutEffect:u.useEffect;const Pr={itemToString:function(e){return e?String(e):""},stateReducer:function(e,t){return t.changes},getA11ySelectionMessage:function(e){const{selectedItem:t,itemToString:n}=e;return t?`${n(t)} has been selected.`:""},scrollIntoView:hr,environment:"undefined"==typeof window?{}:window};Q().array.isRequired,Q().func,Q().func,Q().func,Q().number,Q().number,Q().number,Q().bool,Q().bool,Q().bool,Q().any,Q().any,Q().any,Q().string,Q().string,Q().string,Q().func,Q().string,Q().func,Q().func,Q().func,Q().func,Q().func,Q().shape({addEventListener:Q().func,removeEventListener:Q().func,document:Q().shape({getElementById:Q().func,activeElement:Q().any,body:Q().any})}),ur(ur({},Pr),{getA11yStatusMessage:function(e){var t=e.isOpen,n=e.resultCount,r=e.previousResultCount;return t?n?n!==r?"".concat(n," result").concat(1===n?" is":"s are"," available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select."):"":"No results are available.":""}}),Q().array.isRequired,Q().func,Q().func,Q().func,Q().number,Q().number,Q().number,Q().bool,Q().bool,Q().bool,Q().any,Q().any,Q().any,Q().string,Q().string,Q().string,Q().string,Q().string,Q().string,Q().func,Q().string,Q().string,Q().func,Q().func,Q().func,Q().func,Q().func,Q().func,Q().shape({addEventListener:Q().func,removeEventListener:Q().func,document:Q().shape({getElementById:Q().func,activeElement:Q().any,body:Q().any})}),Q().array,Q().array,Q().array,Q().func,Q().func,Q().func,Q().number,Q().number,Q().number,Q().func,Q().func,Q().string,Q().string,Q().shape({addEventListener:Q().func,removeEventListener:Q().func,document:Q().shape({getElementById:Q().func,activeElement:Q().any,body:Q().any})});var Dr=window.wp.apiFetch,Mr=n.n(Dr),Lr=function(){return Lr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Lr.apply(this,arguments)};function Br(e){var n=e.ajaxAction,r=e.initialValue,i=e.label,a=e.setValue,s=e.showEditLink,l=void 0!==s&&s,c=(0,u.useState)([]),d=c[0],p=c[1],f=(0,u.useState)(""),h=f[0],m=f[1],g=(0,u.useState)(!1),v=g[0],b=g[1],y=window,A=y.ajaxurl,x=y.fm_search,C=(void 0===x?{}:x).nonce,w=void 0===C?"":C,k=y.fm,S=(void 0===k?{}:k).context,E=void 0===S?{}:S,I=E.context,_=void 0===I?"":I,j=E.type,O=void 0===j?"":j,T=function(e){var t=e?e.value:null;a(t)},N=(0,o.useSelect)((function(e){return e("core/editor").getCurrentPost()})).fm_gutenberg_autocomplete_values,R=(void 0===N?[]:N)[n];(0,u.useEffect)((function(){var e,t;R&&!h&&(e=String(r),""!==(t=R[e]||"")&&m(t))}),[r,R,h]);var P=function(e){var t=e.target,r=void 0===t?null:t,o=r?r.value:"";if(!o||o.length<=2)return T(null),p([]),void m("");m(o),function(){if(!(3>h.length)){b(!0);var e={action:n,fm_context:_,fm_subcontext:O,fm_autocomplete_search:h,fm_search_nonce:w,fm_custom_args:null},t=Object.keys(e).map((function(t){return"".concat(t,"=").concat(e[t])})).join("&");Mr()({url:A,method:"POST",body:t,headers:{"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8","x-requested-with":"XMLHttpRequest"}}).then((function(e){0===e?p([]):Array.isArray(e)&&p(e),b(!1)}))}}()};return(0,t.jsx)(Rr,Lr({onChange:function(e){T(e),p([]),m("")},itemToString:function(e){return e?e.label:""}},{children:function(e){var n=e.getInputProps,o=e.getItemProps,a=e.getLabelProps,s=e.highlightedIndex,c=e.inputValue,u=e.isOpen,p=e.selectedItem;return(0,t.jsxs)("div",{children:[null!==i?(0,t.jsx)("label",Lr({},a(),{children:i}),void 0):null,(0,t.jsxs)("div",Lr({className:"fm-gutenberg-dropdown-wrap"},{children:[(0,t.jsx)("input",Lr({type:"text"},n({value:""!==c?c:h,placeholder:(0,je.__)("Search...","fm-gutenberg"),onChange:P})),void 0),l&&r?(0,t.jsx)("a",Lr({href:A.replace("admin-ajax.php","post.php?post=".concat(r,"&action=edit")),target:"_blank",rel:"noreferrer"},{children:(0,je.__)("Edit","fm-gutenberg")}),void 0):null,!0===u?(0,t.jsxs)("div",Lr({className:"fm-gutenberg-dropdown"},{children:[v?(0,t.jsxs)("div",Lr({className:"fm-gutenberg-dropdown-item"},{children:[(0,t.jsx)("span",Lr({role:"alert","aria-busy":!0,className:"screen-reader-text"},{children:(0,je.__)("Working","fm-gutenberg")}),void 0),(0,t.jsx)(re.Spinner,{},void 0)]}),void 0):null,0===d.length&&!v&&c?(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:(0,je.__)("No matches found","fm-gutenberg")},void 0)},void 0):(0,t.jsx)("ul",{children:d.map((function(e,n){return(0,t.jsx)("li",Lr({className:"fm-gutenberg-dropdown-item"},o({key:n,index:n,item:e}),{"data-selected":s===n?"true":"false",style:{backgroundColor:s===n?"lightgray":"white",fontWeight:p===e?"bold":"normal"}},{children:e.label}),void 0)}))},void 0)]}),void 0):null]}),void 0)]},void 0)}}),void 0)}var Hr=function(){return Hr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Hr.apply(this,arguments)};function Fr(e){var n=e.options,r=e.initialValue,o=e.label,i=e.setValue,a=(0,u.useState)(""),s=a[0],l=a[1],c=function(e){var t=e?e.value:null;i(t)};(0,u.useEffect)((function(){var e,t;Number.isNaN(parseInt(r,10))?function(e){var t=n.filter((function(t){return t.value===e}));t.length>0&&l(t[0].label)}(r):(e=parseInt(r,10),(t=n.filter((function(t){return parseInt(t.value,10)===e}))).length>0&&l(t[0].label))}),[r,n]);var d=function(e){var t=e.target,n=void 0===t?null:t,r=n?n.value:"";(!r||r.length<=2)&&c(null)};return(0,t.jsx)(Rr,Hr({onChange:function(e){c(e)},itemToString:function(e){return e?e.label:""}},{children:function(e){var r=e.getInputProps,i=e.getItemProps,a=e.getLabelProps,l=e.highlightedIndex,c=e.inputValue,u=e.isOpen,p=e.selectedItem;return(0,t.jsxs)("div",{children:[null!==o?(0,t.jsx)("label",Hr({},a(),{children:o}),void 0):null,(0,t.jsxs)("div",Hr({className:"fm-gutenberg-dropdown-wrap"},{children:[(0,t.jsx)("input",Hr({type:"text"},r({value:""!==c?c:s,placeholder:(0,je.__)("Search...","fm-gutenberg"),onChange:d})),void 0),!0===u?(0,t.jsx)("div",Hr({className:"fm-gutenberg-dropdown"},{children:(0,t.jsx)("ul",{children:n.filter((function(e){return!c||e.label.toLowerCase().includes(c.toLowerCase())})).map((function(e,n){return(0,t.jsx)("li",Hr({className:"dropdown-item"},i({key:e.label,index:n,item:e}),{style:{backgroundColor:l===n?"lightgray":"white",fontWeight:p===e?"bold":"normal"}},{children:e.label}),void 0)}))},void 0)}),void 0):null]}),void 0)]},void 0)}}),void 0)}var Ur=n(746),zr={};zr.styleTagTransform=ke(),zr.setAttributes=Ae(),zr.insert=be().bind(null,"head"),zr.domAPI=ge(),zr.insertStyleElement=Ce(),he()(Ur.Z,zr),Ur.Z&&Ur.Z.locals&&Ur.Z.locals;var $r=function(){return $r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},$r.apply(this,arguments)};function Vr(e){var n=e.field,r=n.datasource,o=void 0===r?{}:r,i=o.ajax_action,a=void 0===i?"":i,s=o.options,l=void 0===s?null:s,c=n.description,u=void 0===c?"":c,d=n.description_after_element,p=void 0===d||d,f=n.name,h=n.show_edit_link,m=void 0!==h&&h,g=e.valueHook,v=e.index,b=void 0===v?null:v,y=e.label,A=void 0===y?"":y,x=g(null!==b?b:f),C=x[0],w=x[1],k=C&&"object"==typeof C&&!Array.isArray(C)?C[f]:C;k=k?String(k):"";var S=Object.keys(l).map((function(e){return{label:l[e],value:e}}));return(0,t.jsx)(re.PanelRow,{children:(0,t.jsxs)("div",$r({className:"fm-gutenberg-flex__column"},{children:[u&&!p?(0,t.jsx)("div",$r({className:"fm-gutenberg-item__description"},{children:u}),void 0):null,a?(0,t.jsx)(Br,{ajaxAction:a,label:A,initialValue:k,setValue:w,showEditLink:m},void 0):null,S.length>0&&!a?(0,t.jsx)(Fr,{options:S,label:A,initialValue:k,setValue:w},void 0):null,u&&p?(0,t.jsx)("div",$r({className:"fm-gutenberg-item__description"},{children:u}),void 0):null]}),void 0)},void 0)}var Wr=n(241),Gr={};Gr.styleTagTransform=ke(),Gr.setAttributes=Ae(),Gr.insert=be().bind(null,"head"),Gr.domAPI=ge(),Gr.insertStyleElement=Ce(),he()(Wr.Z,Gr),Wr.Z&&Wr.Z.locals&&Wr.Z.locals;var Kr=function(){return Kr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Kr.apply(this,arguments)};function Zr(e){var n=e.field,r=e.field,o=r.children,i=r.description,a=r.display_if,s=void 0===a?{}:a,l=s.src,c=void 0===l?"":l,u=s.value,d=void 0===u?"":u,p=r.field_class,f=r.fm_class,h=r.label,m=void 0===h?"":h,g=r.name,v=void 0===g?"":g,b=r.serialize_data,y=void 0===b||b,A=r.tabbed,x=void 0===A?"":A,C=e.index,w=void 0===C?null:C,k=e.valueHook;if(""!==c){var S=k(c)[0],E=S&&"object"==typeof S&&!Array.isArray(S)?S[c]:S;if(E=E?String(E):"",d!==String(E))return null}if(o&&"group"===p){var I,_=k(null!=w?w:v),j=_[0],O=_[1];return I=y?function(e){var t,n=null===j||"object"!=typeof j||Array.isArray(j)?((t={})[e]=j,t):j;return[n?n[e]:null,function(t){var r,o=Kr(Kr({},n),((r={})[e]=t,r));O(o)}]}:k,x?(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h4",{children:m},void 0),(0,t.jsxs)(P,Kr({className:"vertical"===x?"react-tabs react-tabs__vertical":"react-tabs"},{children:[(0,t.jsx)(B,{children:Object.values(o).map((function(e){return(0,t.jsx)(V,{children:e.label},void 0)}))},void 0),Object.keys(o).map((function(e){return(0,t.jsx)(q,{children:(0,t.jsx)(Zr,{field:o[e],index:w,valueHook:I},e)},void 0)})),i?(0,t.jsx)(ne,{tag:"p",className:"fm-group-description",html:i},void 0):null]}),void 0)]},void 0):(0,t.jsxs)("div",Kr({className:"fm-gutenberg__group"},{children:[Object.keys(o).map((function(e){return(0,t.jsx)(Zr,{field:o[e],valueHook:I},e)})),i?(0,t.jsx)(ne,{tag:"p",className:"fm-group-description",html:i},void 0):null]}),"".concat(v,"-group"))}switch(f){case"Fieldmanager_Autocomplete":return(0,t.jsx)(Vr,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_Checkbox":return(0,t.jsx)(oe,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_Checkboxes":return(0,t.jsx)(_e,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_Colorpicker":return(0,t.jsx)(Re,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_Datepicker":return(0,t.jsx)(Be,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_DraggablePost":return(0,t.jsx)("p",{children:"Fieldmanager_DraggablePost"},void 0);case"Fieldmanager_Grid":return(0,t.jsx)("p",{children:"Fieldmanager_Grid"},void 0);case"Fieldmanager_Hidden":return(0,t.jsx)(Pn,{field:n,valueHook:k,index:w,label:m,type:"hidden"},void 0);case"Fieldmanager_Link":return(0,t.jsx)(Pn,{field:n,valueHook:k,index:w,label:m,type:"url"},void 0);case"Fieldmanager_Media":if("media"===p)return(0,t.jsx)(En,{field:n,valueHook:k,index:w,label:m},void 0);break;case"Fieldmanager_Password":return(0,t.jsx)(Pn,{field:n,valueHook:k,index:w,label:m,type:"password"},void 0);case"Fieldmanager_Radios":return(0,t.jsx)(In,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_RichTextArea":return(0,t.jsx)(ir,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_Select":return(0,t.jsx)(_n,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_TextArea":return(0,t.jsx)(Dn,{field:n,valueHook:k,index:w,label:m},void 0);case"Fieldmanager_TextField":return(0,t.jsx)(Pn,{field:n,valueHook:k,index:w,label:m},void 0);default:return null}}var qr=function(){return qr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},qr.apply(this,arguments)};Object.create,Object.create;var Yr=n(206),Xr=n.n(Yr),Jr=function(e,t,n){for(var r=e.x,o=e.y,i=(void 0===n?{}:n).fallbackToClosest,a=void 0!==i&&i,s=1e4,l=-1,c=0;c<t.length;c+=1){var u=t[c];if(r>=u.left&&r<u.right&&o>=u.top&&o<u.bottom)return c;if(a){var d=(u.left+u.right)/2,p=(u.top+u.bottom)/2,f=Math.sqrt(Math.pow(r-d,2)+Math.pow(o-p,2));f<s&&(s=f,l=c)}}return l},Qr=function(e){return{x:Number(e.clientX),y:Number(e.clientY)}},eo=function(e){return{x:Number(e.clientX),y:Number(e.clientY)}},to=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},no=function(e){e.preventDefault()},ro=function(){window.removeEventListener("contextmenu",no)},oo=d().createContext(void 0),io=function(e){var t=e.children,n=d().useContext(oo);if(!n)throw new Error("SortableItem must be a child of SortableList");var r=n.registerItem,o=n.removeItem,i=d().useRef(null);return d().useEffect((function(){var e=i.current;return e&&r(e),function(){e&&o(e)}}),[r,o,t]),d().cloneElement(t,{ref:i})},ao=function(e){var t=e.children,n=d().useContext(oo);if(!n)throw new Error("SortableKnob must be a child of SortableList");var r=n.registerKnob,o=n.removeKnob,i=d().useRef(null);return d().useEffect((function(){var e=i.current;return e&&r(e),function(){e&&o(e)}}),[r,o,t]),d().cloneElement(t,{ref:i})},so=function(e){var t=e.children,n=e.allowDrag,r=void 0===n||n,o=e.onSortEnd,i=e.draggedItemClassName,a=e.as,s=e.lockAxis,l=e.customHolderRef,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["children","allowDrag","onSortEnd","draggedItemClassName","as","lockAxis","customHolderRef"]),u=d().useRef([]),p=d().useRef([]),f=d().useRef([]),h=d().useRef(null),m=d().useRef(null),g=d().useRef(void 0),v=d().useRef(void 0),b=d().useRef({x:0,y:0});d().useEffect((function(){var e=(null==l?void 0:l.current)||document.body;return function(){m.current&&e.removeChild(m.current)}}),[l]);var y=function(e){if(m.current&&void 0!==g.current){var t=b.current,n=p.current[g.current],r="y"===s?n.left:e.x-t.x,o="x"===s?n.top:e.y-t.y;m.current.style.transform="translate3d("+r+"px, "+o+"px, 0px)"}},A=d().useCallback((function(e){if(h.current){var t=u.current[e],n=p.current[e],r=t.cloneNode(!0);i&&i.split(" ").forEach((function(e){return r.classList.add(e)})),r.style.width=n.width+"px",r.style.height=n.height+"px",r.style.position="fixed",r.style.margin="0",r.style.top="0",r.style.left="0";var o=t.querySelectorAll("canvas");r.querySelectorAll("canvas").forEach((function(e,t){var n;null===(n=e.getContext("2d"))||void 0===n||n.drawImage(o[t],0,0)})),((null==l?void 0:l.current)||document.body).appendChild(r),m.current=r}}),[l,i]),x=function(e){var t=e.onStart,n=e.onMove,r=e.onEnd,o=e.allowDrag,i=void 0===o||o,a=e.containerRef,s=e.knobs,l=d().useRef({x:0,y:0}),c=d().useRef(void 0),u=d().useRef(!1),p=d().useRef({onStart:t,onMove:n,onEnd:r}),f=d().useState(!1),h=f[0],m=f[1];d().useEffect((function(){p.current={onStart:t,onMove:n,onEnd:r}}),[t,n,r]);var g=function(){c.current&&window.clearTimeout(c.current)},v=d().useCallback((function(){if(a.current){var e=a.current.getBoundingClientRect();l.current={x:e.left,y:e.top}}}),[a]),b=d().useCallback((function(e){var t=to(e,l.current);p.current.onMove&&p.current.onMove({pointInWindow:e,point:t})}),[]),y=d().useCallback((function(e){if(u.current){u.current=!1;var t=Qr(e),n=to(t,l.current);p.current.onStart&&p.current.onStart({point:n,pointInWindow:t})}else b(Qr(e))}),[b]),A=d().useCallback((function(e){e.cancelable?(e.preventDefault(),b(eo(e.touches[0]))):(document.removeEventListener("touchmove",A),p.current.onEnd&&p.current.onEnd())}),[b]),x=d().useCallback((function(){u.current=!1,document.removeEventListener("mousemove",y),document.removeEventListener("mouseup",x),p.current.onEnd&&p.current.onEnd()}),[y]),C=d().useCallback((function(){document.removeEventListener("touchmove",A),document.removeEventListener("touchend",C),ro(),p.current.onEnd&&p.current.onEnd()}),[A]),w=d().useCallback((function(e){0===e.button&&((null==s?void 0:s.length)&&!s.find((function(t){return t.contains(e.target)}))||(document.addEventListener("mousemove",y),document.addEventListener("mouseup",x),v(),u.current=!0))}),[y,x,v,s]),k=d().useCallback((function(e,t){document.addEventListener("touchmove",A,{capture:!1,passive:!1}),document.addEventListener("touchend",C),window.addEventListener("contextmenu",no,{capture:!0,passive:!1}),p.current.onStart&&p.current.onStart({point:e,pointInWindow:t})}),[C,A]),S=d().useCallback((function(e){if(!(null==s?void 0:s.length)||s.find((function(t){return t.contains(e.target)}))){v();var t=eo(e.touches[0]),n=to(t,l.current);c.current=window.setTimeout((function(){return k(n,t)}),120)}}),[k,v,s]),E=d().useCallback((function(){m(!0),document.removeEventListener("touchstart",E)}),[]),I=d().useCallback((function(){g()}),[]);return d().useLayoutEffect((function(){if(h){var e=a.current;return i&&(null==e||e.addEventListener("touchstart",S,{capture:!0,passive:!1}),document.addEventListener("touchmove",I,{capture:!1,passive:!1}),document.addEventListener("touchend",I,{capture:!1,passive:!1})),function(){null==e||e.removeEventListener("touchstart",S,{capture:!0}),document.removeEventListener("touchmove",I,{capture:!1}),document.removeEventListener("touchend",I,{capture:!1}),document.removeEventListener("touchmove",A),document.removeEventListener("touchend",C),ro(),g()}}return document.addEventListener("touchstart",E),function(){document.removeEventListener("touchstart",E),document.removeEventListener("mousemove",y),document.removeEventListener("mouseup",x)}}),[h,i,E,y,A,I,C,x,a,S]),h?{}:{onMouseDown:w}}({allowDrag:r,containerRef:h,knobs:f.current,onStart:function(e){var t=e.pointInWindow;if(h.current){p.current=u.current.map((function(e){return e.getBoundingClientRect()}));var n=Jr(t,p.current);if(-1!==n){g.current=n,A(n);var r=u.current[n];r.style.opacity="0",r.style.visibility="hidden";var o=r.getBoundingClientRect();b.current={x:t.x-o.left,y:t.y-o.top},y(t),window.navigator.vibrate&&window.navigator.vibrate(100)}}},onMove:function(e){var t=e.pointInWindow;y(t);var n=g.current;if(void 0!==n&&void 0!==g.current){var r=p.current[g.current],o={x:"y"===s?r.left:t.x,y:"x"===s?r.top:t.y},i=Jr(o,p.current,{fallbackToClosest:!0});if(-1!==i){v.current=i;for(var a=n<i,l=0;l<u.current.length;l+=1){var c=u.current[l],d=p.current[l];if(a&&l>=n&&l<=i||!a&&l>=i&&l<=n){var f=p.current[a?l-1:l+1];if(f){var h=f.left-d.left,m=f.top-d.top;c.style.transform="translate3d("+h+"px, "+m+"px, 0px)"}}else c.style.transform="translate3d(0,0,0)";c.style.transitionDuration="300ms"}}}},onEnd:function(){for(var e=0;e<u.current.length;e+=1){var t=u.current[e];t.style.transform="",t.style.transitionDuration=""}var n=g.current;if(void 0!==n){var r=u.current[n];r&&(r.style.opacity="1",r.style.visibility="");var i=v.current;void 0!==i&&n!==i&&(u.current=Xr()(u.current,n,i),o(n,i))}g.current=void 0,v.current=void 0,m.current&&(((null==l?void 0:l.current)||document.body).removeChild(m.current),m.current=null)}}),C=d().useCallback((function(e){u.current.push(e)}),[]),w=d().useCallback((function(e){var t=u.current.indexOf(e);-1!==t&&u.current.splice(t,1)}),[]),k=d().useCallback((function(e){f.current.push(e)}),[]),S=d().useCallback((function(e){var t=f.current.indexOf(e);-1!==t&&f.current.splice(t,1)}),[]),E=d().useMemo((function(){return{registerItem:C,removeItem:w,registerKnob:k,removeKnob:S}}),[C,w,k,S]);return d().createElement(a||"div",qr(qr(qr({},r?x:{}),c),{ref:h}),d().createElement(oo.Provider,{value:E},t))},lo=n(184),co=n.n(lo),uo=function(){return uo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},uo.apply(this,arguments)};function po(e){var n=e.addMoreLabel,r=e.addNew,o=e.limit,i=e.minimumCount;return 0===o||o>1&&o>i?(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)(re.Button,uo({isSecondary:!0,onClick:r},{children:n}),void 0)},void 0):null}var fo=n(752),ho={};ho.styleTagTransform=ke(),ho.setAttributes=Ae(),ho.insert=be().bind(null,"head"),ho.domAPI=ge(),ho.insertStyleElement=Ce(),he()(fo.Z,ho),fo.Z&&fo.Z.locals&&fo.Z.locals;var mo=function(){return mo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},mo.apply(this,arguments)},go=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},vo=(0,u.forwardRef)((function(e,n){return(0,t.jsx)("span",mo({ref:n,className:"fm-gutenberg-move-handle","aria-label":(0,je.__)("Move","fm-gutenberg")},{children:e.children}),void 0)}));function bo(e){var n=e.children,r=e.onSortEnd;return e.sortable?(0,t.jsx)(so,mo({onSortEnd:r,className:"fm-gutenberg-sortable-list"},{children:n}),void 0):(0,t.jsx)("ul",mo({className:"fm-gutenberg-list"},{children:n}),void 0)}function yo(e){var n=e.children,r=e.keyValue;return e.sortable?(0,t.jsx)(io,{children:n},r):(0,t.jsx)("li",{children:n},r)}function Ao(e){var n=e.childindex,r=e.removeElement;return(0,t.jsx)(re.Button,mo({onClick:function(){return r(n)},className:"fm-gutenberg-remove"},{children:(0,t.jsx)("span",mo({className:"screen-reader-text"},{children:(0,je.__)("Remove","fm-gutenberg")}),void 0)}),void 0)}function xo(e){var n=e.label,r=e.collapsible,o=e.childindex,i=(0,e.collapsedHook)(o),a=i[0],s=i[1];return(0,t.jsxs)(t.Fragment,{children:[n&&!r?(0,t.jsx)("h4",{children:n},void 0):null,n&&r?(0,t.jsx)(re.Button,mo({isLink:!0,onClick:function(){return s(!a)}},{children:(0,t.jsxs)("h4",{children:[n,(0,t.jsx)("span",{className:co()("fm-gutenberg-repeatable",{"fm-gutenberg-repeatable__down":a},{"fm-gutenberg-repeatable__up":!a})},void 0)]},void 0)}),void 0):null]},void 0)}function Co(e){var n=e.children,r=e.childindex,o=(0,e.collapsedHook)(r)[0];return(0,t.jsx)("div",mo({className:co()("fm-gutenberg__group-content",{collapsed:o})},{children:n}),void 0)}function wo(e){var n=e.field,r=e.field,o=r.add_more_label,i=void 0===o?"":o,a=r.add_more_position,s=void 0===a?"bottom":a,l=r.collapsible,c=r.collapsed,d=r.label,p=r.limit,f=void 0===p?null:p,h=r.minimumCount,m=void 0===h?null:h,g=r.name,v=r.sortable,b=(0,e.valueHook)(g),y=b[0],A=b[1],x=(0,u.useState)(y?Array(null==y?void 0:y.length).fill(c,0,y.length):[]),C=x[0],w=x[1],k=function(e){return[y[e],function(t){var n=go([],y,!0);n[e]=t,A(n)}]},S=function(e){return[C[e],function(t){var n=go([],C,!0);n[e]=t,w(n)}]},E=function(){var e=y[0]&&"object"==typeof y[0]?{}:"",t="bottom"===s?go(go([],y,!0),[e],!1):go([e],y,!0);A(t)},I=function(e){var t=go([],y,!0);t.splice(e,1),A(t)};return(0,t.jsxs)(t.Fragment,{children:["top"===s?(0,t.jsx)(po,{addMoreLabel:i,addNew:E,limit:f,minimumCount:m},void 0):null,(0,t.jsx)(re.PanelRow,{children:(0,t.jsx)(bo,mo({onSortEnd:function(e,t){var n,r,o,i=(n=go([],y,!0),r=e,o=t,function(e,t,n){const r=t<0?e.length+t:t;if(r>=0&&r<e.length){const r=n<0?e.length+n:n,[o]=e.splice(t,1);e.splice(r,0,o)}}(n=[...n],r,o),n);A(i)},sortable:v},{children:y&&Array.isArray(y)?y.map((function(e,r){var o="repeatable-".concat(r);return(0,t.jsx)(yo,mo({keyValue:o,sortable:v},{children:(0,t.jsx)(re.PanelRow,{children:(0,t.jsxs)("div",mo({className:"fm-gutenberg-panel-container"},{children:[(0,t.jsx)("div",mo({className:"fm-gutenberg-controls"},{children:v?(0,t.jsx)(ao,{children:(0,t.jsxs)(vo,{children:[(0,t.jsx)(xo,{label:d,collapsible:l,childindex:r,collapsedHook:S},void 0),(0,t.jsx)(Ao,{childindex:r,removeElement:I},void 0)]},void 0)},void 0):(0,t.jsx)(Ao,{childindex:r,removeElement:I},void 0)}),void 0),(0,t.jsx)(Co,mo({childindex:r,collapsedHook:S},{children:(0,t.jsx)(Zr,{field:n,index:r,valueHook:k},void 0)}),void 0)]}),void 0)},void 0)}),void 0)})):null}),void 0)},void 0),"bottom"===s?(0,t.jsx)(po,{addMoreLabel:i,addNew:E,limit:f,minimumCount:m},void 0):null]},void 0)}var ko=function(){return ko=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ko.apply(this,arguments)};function So(e){var n=e.field,r=n.title,o=n.fm;return(0,t.jsx)(i.PluginDocumentSettingPanel,ko({name:o.name,title:r},{children:1!==o.limit?(0,t.jsx)(wo,{field:o,valueHook:c},void 0):(0,t.jsx)(Zr,{field:o,valueHook:c},void 0)}),void 0)}(0,e.registerPlugin)("fm-gutenberg-sidebar",{render:function(){var e=(0,o.useSelect)((function(e){return e("core/editor").getCurrentPost()})).fm_gutenberg_fields,n=(void 0===e?[]:e).side;return(void 0===n?[]:n).map((function(e){return(0,t.jsx)(So,{field:e},r(e))}))},icon:null})}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,